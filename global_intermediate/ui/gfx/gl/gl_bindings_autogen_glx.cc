// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is automatically generated.

#include "ui/gfx/gl/gl_bindings.h"
#include "ui/gfx/gl/gl_implementation.h"

namespace gfx {

glXChooseVisualProc g_glXChooseVisual;
glXCreateContextProc g_glXCreateContext;
glXBindTexImageEXTProc g_glXBindTexImageEXT;
glXReleaseTexImageEXTProc g_glXReleaseTexImageEXT;
glXDestroyContextProc g_glXDestroyContext;
glXMakeCurrentProc g_glXMakeCurrent;
glXCopyContextProc g_glXCopyContext;
glXSwapBuffersProc g_glXSwapBuffers;
glXCreateGLXPixmapProc g_glXCreateGLXPixmap;
glXDestroyGLXPixmapProc g_glXDestroyGLXPixmap;
glXQueryExtensionProc g_glXQueryExtension;
glXQueryVersionProc g_glXQueryVersion;
glXIsDirectProc g_glXIsDirect;
glXGetConfigProc g_glXGetConfig;
glXGetCurrentContextProc g_glXGetCurrentContext;
glXGetCurrentDrawableProc g_glXGetCurrentDrawable;
glXWaitGLProc g_glXWaitGL;
glXWaitXProc g_glXWaitX;
glXUseXFontProc g_glXUseXFont;
glXQueryExtensionsStringProc g_glXQueryExtensionsString;
glXQueryServerStringProc g_glXQueryServerString;
glXGetClientStringProc g_glXGetClientString;
glXGetCurrentDisplayProc g_glXGetCurrentDisplay;
glXChooseFBConfigProc g_glXChooseFBConfig;
glXGetFBConfigAttribProc g_glXGetFBConfigAttrib;
glXGetFBConfigsProc g_glXGetFBConfigs;
glXGetVisualFromFBConfigProc g_glXGetVisualFromFBConfig;
glXCreateWindowProc g_glXCreateWindow;
glXDestroyWindowProc g_glXDestroyWindow;
glXCreatePixmapProc g_glXCreatePixmap;
glXDestroyPixmapProc g_glXDestroyPixmap;
glXCreatePbufferProc g_glXCreatePbuffer;
glXDestroyPbufferProc g_glXDestroyPbuffer;
glXQueryDrawableProc g_glXQueryDrawable;
glXCreateNewContextProc g_glXCreateNewContext;
glXMakeContextCurrentProc g_glXMakeContextCurrent;
glXGetCurrentReadDrawableProc g_glXGetCurrentReadDrawable;
glXQueryContextProc g_glXQueryContext;
glXSelectEventProc g_glXSelectEvent;
glXGetSelectedEventProc g_glXGetSelectedEvent;
glXSwapIntervalEXTProc g_glXSwapIntervalEXT;
glXGetFBConfigFromVisualSGIXProc g_glXGetFBConfigFromVisualSGIX;
glXCreateContextAttribsARBProc g_glXCreateContextAttribsARB;

static glXChooseVisualProc g_debug_glXChooseVisual;
static glXCreateContextProc g_debug_glXCreateContext;
static glXBindTexImageEXTProc g_debug_glXBindTexImageEXT;
static glXReleaseTexImageEXTProc g_debug_glXReleaseTexImageEXT;
static glXDestroyContextProc g_debug_glXDestroyContext;
static glXMakeCurrentProc g_debug_glXMakeCurrent;
static glXCopyContextProc g_debug_glXCopyContext;
static glXSwapBuffersProc g_debug_glXSwapBuffers;
static glXCreateGLXPixmapProc g_debug_glXCreateGLXPixmap;
static glXDestroyGLXPixmapProc g_debug_glXDestroyGLXPixmap;
static glXQueryExtensionProc g_debug_glXQueryExtension;
static glXQueryVersionProc g_debug_glXQueryVersion;
static glXIsDirectProc g_debug_glXIsDirect;
static glXGetConfigProc g_debug_glXGetConfig;
static glXGetCurrentContextProc g_debug_glXGetCurrentContext;
static glXGetCurrentDrawableProc g_debug_glXGetCurrentDrawable;
static glXWaitGLProc g_debug_glXWaitGL;
static glXWaitXProc g_debug_glXWaitX;
static glXUseXFontProc g_debug_glXUseXFont;
static glXQueryExtensionsStringProc g_debug_glXQueryExtensionsString;
static glXQueryServerStringProc g_debug_glXQueryServerString;
static glXGetClientStringProc g_debug_glXGetClientString;
static glXGetCurrentDisplayProc g_debug_glXGetCurrentDisplay;
static glXChooseFBConfigProc g_debug_glXChooseFBConfig;
static glXGetFBConfigAttribProc g_debug_glXGetFBConfigAttrib;
static glXGetFBConfigsProc g_debug_glXGetFBConfigs;
static glXGetVisualFromFBConfigProc g_debug_glXGetVisualFromFBConfig;
static glXCreateWindowProc g_debug_glXCreateWindow;
static glXDestroyWindowProc g_debug_glXDestroyWindow;
static glXCreatePixmapProc g_debug_glXCreatePixmap;
static glXDestroyPixmapProc g_debug_glXDestroyPixmap;
static glXCreatePbufferProc g_debug_glXCreatePbuffer;
static glXDestroyPbufferProc g_debug_glXDestroyPbuffer;
static glXQueryDrawableProc g_debug_glXQueryDrawable;
static glXCreateNewContextProc g_debug_glXCreateNewContext;
static glXMakeContextCurrentProc g_debug_glXMakeContextCurrent;
static glXGetCurrentReadDrawableProc g_debug_glXGetCurrentReadDrawable;
static glXQueryContextProc g_debug_glXQueryContext;
static glXSelectEventProc g_debug_glXSelectEvent;
static glXGetSelectedEventProc g_debug_glXGetSelectedEvent;
static glXSwapIntervalEXTProc g_debug_glXSwapIntervalEXT;
static glXGetFBConfigFromVisualSGIXProc g_debug_glXGetFBConfigFromVisualSGIX;
static glXCreateContextAttribsARBProc g_debug_glXCreateContextAttribsARB;

void InitializeGLBindingsGLX() {
  if (!g_glXChooseVisual)
    g_glXChooseVisual = reinterpret_cast<glXChooseVisualProc>(GetGLProcAddress("glXChooseVisual"));
  if (!g_glXCreateContext)
    g_glXCreateContext = reinterpret_cast<glXCreateContextProc>(GetGLProcAddress("glXCreateContext"));
  if (!g_glXBindTexImageEXT)
    g_glXBindTexImageEXT = reinterpret_cast<glXBindTexImageEXTProc>(GetGLProcAddress("glXBindTexImageEXT"));
  if (!g_glXReleaseTexImageEXT)
    g_glXReleaseTexImageEXT = reinterpret_cast<glXReleaseTexImageEXTProc>(GetGLProcAddress("glXReleaseTexImageEXT"));
  if (!g_glXDestroyContext)
    g_glXDestroyContext = reinterpret_cast<glXDestroyContextProc>(GetGLProcAddress("glXDestroyContext"));
  if (!g_glXMakeCurrent)
    g_glXMakeCurrent = reinterpret_cast<glXMakeCurrentProc>(GetGLProcAddress("glXMakeCurrent"));
  if (!g_glXCopyContext)
    g_glXCopyContext = reinterpret_cast<glXCopyContextProc>(GetGLProcAddress("glXCopyContext"));
  if (!g_glXSwapBuffers)
    g_glXSwapBuffers = reinterpret_cast<glXSwapBuffersProc>(GetGLProcAddress("glXSwapBuffers"));
  if (!g_glXCreateGLXPixmap)
    g_glXCreateGLXPixmap = reinterpret_cast<glXCreateGLXPixmapProc>(GetGLProcAddress("glXCreateGLXPixmap"));
  if (!g_glXDestroyGLXPixmap)
    g_glXDestroyGLXPixmap = reinterpret_cast<glXDestroyGLXPixmapProc>(GetGLProcAddress("glXDestroyGLXPixmap"));
  if (!g_glXQueryExtension)
    g_glXQueryExtension = reinterpret_cast<glXQueryExtensionProc>(GetGLProcAddress("glXQueryExtension"));
  if (!g_glXQueryVersion)
    g_glXQueryVersion = reinterpret_cast<glXQueryVersionProc>(GetGLProcAddress("glXQueryVersion"));
  if (!g_glXIsDirect)
    g_glXIsDirect = reinterpret_cast<glXIsDirectProc>(GetGLProcAddress("glXIsDirect"));
  if (!g_glXGetConfig)
    g_glXGetConfig = reinterpret_cast<glXGetConfigProc>(GetGLProcAddress("glXGetConfig"));
  if (!g_glXGetCurrentContext)
    g_glXGetCurrentContext = reinterpret_cast<glXGetCurrentContextProc>(GetGLProcAddress("glXGetCurrentContext"));
  if (!g_glXGetCurrentDrawable)
    g_glXGetCurrentDrawable = reinterpret_cast<glXGetCurrentDrawableProc>(GetGLProcAddress("glXGetCurrentDrawable"));
  if (!g_glXWaitGL)
    g_glXWaitGL = reinterpret_cast<glXWaitGLProc>(GetGLProcAddress("glXWaitGL"));
  if (!g_glXWaitX)
    g_glXWaitX = reinterpret_cast<glXWaitXProc>(GetGLProcAddress("glXWaitX"));
  if (!g_glXUseXFont)
    g_glXUseXFont = reinterpret_cast<glXUseXFontProc>(GetGLProcAddress("glXUseXFont"));
  if (!g_glXQueryExtensionsString)
    g_glXQueryExtensionsString = reinterpret_cast<glXQueryExtensionsStringProc>(GetGLProcAddress("glXQueryExtensionsString"));
  if (!g_glXQueryServerString)
    g_glXQueryServerString = reinterpret_cast<glXQueryServerStringProc>(GetGLProcAddress("glXQueryServerString"));
  if (!g_glXGetClientString)
    g_glXGetClientString = reinterpret_cast<glXGetClientStringProc>(GetGLProcAddress("glXGetClientString"));
  if (!g_glXGetCurrentDisplay)
    g_glXGetCurrentDisplay = reinterpret_cast<glXGetCurrentDisplayProc>(GetGLProcAddress("glXGetCurrentDisplay"));
  if (!g_glXChooseFBConfig)
    g_glXChooseFBConfig = reinterpret_cast<glXChooseFBConfigProc>(GetGLProcAddress("glXChooseFBConfig"));
  if (!g_glXGetFBConfigAttrib)
    g_glXGetFBConfigAttrib = reinterpret_cast<glXGetFBConfigAttribProc>(GetGLProcAddress("glXGetFBConfigAttrib"));
  if (!g_glXGetFBConfigs)
    g_glXGetFBConfigs = reinterpret_cast<glXGetFBConfigsProc>(GetGLProcAddress("glXGetFBConfigs"));
  if (!g_glXGetVisualFromFBConfig)
    g_glXGetVisualFromFBConfig = reinterpret_cast<glXGetVisualFromFBConfigProc>(GetGLProcAddress("glXGetVisualFromFBConfig"));
  if (!g_glXCreateWindow)
    g_glXCreateWindow = reinterpret_cast<glXCreateWindowProc>(GetGLProcAddress("glXCreateWindow"));
  if (!g_glXDestroyWindow)
    g_glXDestroyWindow = reinterpret_cast<glXDestroyWindowProc>(GetGLProcAddress("glXDestroyWindow"));
  if (!g_glXCreatePixmap)
    g_glXCreatePixmap = reinterpret_cast<glXCreatePixmapProc>(GetGLProcAddress("glXCreatePixmap"));
  if (!g_glXDestroyPixmap)
    g_glXDestroyPixmap = reinterpret_cast<glXDestroyPixmapProc>(GetGLProcAddress("glXDestroyPixmap"));
  if (!g_glXCreatePbuffer)
    g_glXCreatePbuffer = reinterpret_cast<glXCreatePbufferProc>(GetGLProcAddress("glXCreatePbuffer"));
  if (!g_glXDestroyPbuffer)
    g_glXDestroyPbuffer = reinterpret_cast<glXDestroyPbufferProc>(GetGLProcAddress("glXDestroyPbuffer"));
  if (!g_glXQueryDrawable)
    g_glXQueryDrawable = reinterpret_cast<glXQueryDrawableProc>(GetGLProcAddress("glXQueryDrawable"));
  if (!g_glXCreateNewContext)
    g_glXCreateNewContext = reinterpret_cast<glXCreateNewContextProc>(GetGLProcAddress("glXCreateNewContext"));
  if (!g_glXMakeContextCurrent)
    g_glXMakeContextCurrent = reinterpret_cast<glXMakeContextCurrentProc>(GetGLProcAddress("glXMakeContextCurrent"));
  if (!g_glXGetCurrentReadDrawable)
    g_glXGetCurrentReadDrawable = reinterpret_cast<glXGetCurrentReadDrawableProc>(GetGLProcAddress("glXGetCurrentReadDrawable"));
  if (!g_glXQueryContext)
    g_glXQueryContext = reinterpret_cast<glXQueryContextProc>(GetGLProcAddress("glXQueryContext"));
  if (!g_glXSelectEvent)
    g_glXSelectEvent = reinterpret_cast<glXSelectEventProc>(GetGLProcAddress("glXSelectEvent"));
  if (!g_glXGetSelectedEvent)
    g_glXGetSelectedEvent = reinterpret_cast<glXGetSelectedEventProc>(GetGLProcAddress("glXGetSelectedEvent"));
  if (!g_glXSwapIntervalEXT)
    g_glXSwapIntervalEXT = reinterpret_cast<glXSwapIntervalEXTProc>(GetGLProcAddress("glXSwapIntervalEXT"));
  if (!g_glXGetFBConfigFromVisualSGIX)
    g_glXGetFBConfigFromVisualSGIX = reinterpret_cast<glXGetFBConfigFromVisualSGIXProc>(GetGLProcAddress("glXGetFBConfigFromVisualSGIX"));
  if (!g_glXCreateContextAttribsARB)
    g_glXCreateContextAttribsARB = reinterpret_cast<glXCreateContextAttribsARBProc>(GetGLProcAddress("glXCreateContextAttribsARB"));
}

extern "C" {

static XVisualInfo* GL_BINDING_CALL Debug_glXChooseVisual(Display* dpy, int screen, int* attribList) {
  GL_SERVICE_LOG("glXChooseVisual" << "("  << static_cast<const void*>(dpy) << ", " << screen << ", " << static_cast<const void*>(attribList) << ")");
  XVisualInfo* result = g_debug_glXChooseVisual(dpy, screen, attribList);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLXContext GL_BINDING_CALL Debug_glXCreateContext(Display* dpy, XVisualInfo* vis, GLXContext shareList, int direct) {
  GL_SERVICE_LOG("glXCreateContext" << "("  << static_cast<const void*>(dpy) << ", " << static_cast<const void*>(vis) << ", " << shareList << ", " << direct << ")");
  GLXContext result = g_debug_glXCreateContext(dpy, vis, shareList, direct);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glXBindTexImageEXT(Display* dpy, GLXDrawable drawable, int buffer, int* attribList) {
  GL_SERVICE_LOG("glXBindTexImageEXT" << "("  << static_cast<const void*>(dpy) << ", " << drawable << ", " << buffer << ", " << static_cast<const void*>(attribList) << ")");
  g_debug_glXBindTexImageEXT(dpy, drawable, buffer, attribList);
}

static void GL_BINDING_CALL Debug_glXReleaseTexImageEXT(Display* dpy, GLXDrawable drawable, int buffer) {
  GL_SERVICE_LOG("glXReleaseTexImageEXT" << "("  << static_cast<const void*>(dpy) << ", " << drawable << ", " << buffer << ")");
  g_debug_glXReleaseTexImageEXT(dpy, drawable, buffer);
}

static void GL_BINDING_CALL Debug_glXDestroyContext(Display* dpy, GLXContext ctx) {
  GL_SERVICE_LOG("glXDestroyContext" << "("  << static_cast<const void*>(dpy) << ", " << ctx << ")");
  g_debug_glXDestroyContext(dpy, ctx);
}

static int GL_BINDING_CALL Debug_glXMakeCurrent(Display* dpy, GLXDrawable drawable, GLXContext ctx) {
  GL_SERVICE_LOG("glXMakeCurrent" << "("  << static_cast<const void*>(dpy) << ", " << drawable << ", " << ctx << ")");
  int result = g_debug_glXMakeCurrent(dpy, drawable, ctx);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glXCopyContext(Display* dpy, GLXContext src, GLXContext dst, unsigned long mask) {
  GL_SERVICE_LOG("glXCopyContext" << "("  << static_cast<const void*>(dpy) << ", " << src << ", " << dst << ", " << mask << ")");
  g_debug_glXCopyContext(dpy, src, dst, mask);
}

static void GL_BINDING_CALL Debug_glXSwapBuffers(Display* dpy, GLXDrawable drawable) {
  GL_SERVICE_LOG("glXSwapBuffers" << "("  << static_cast<const void*>(dpy) << ", " << drawable << ")");
  g_debug_glXSwapBuffers(dpy, drawable);
}

static GLXPixmap GL_BINDING_CALL Debug_glXCreateGLXPixmap(Display* dpy, XVisualInfo* visual, Pixmap pixmap) {
  GL_SERVICE_LOG("glXCreateGLXPixmap" << "("  << static_cast<const void*>(dpy) << ", " << static_cast<const void*>(visual) << ", " << pixmap << ")");
  GLXPixmap result = g_debug_glXCreateGLXPixmap(dpy, visual, pixmap);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glXDestroyGLXPixmap(Display* dpy, GLXPixmap pixmap) {
  GL_SERVICE_LOG("glXDestroyGLXPixmap" << "("  << static_cast<const void*>(dpy) << ", " << pixmap << ")");
  g_debug_glXDestroyGLXPixmap(dpy, pixmap);
}

static int GL_BINDING_CALL Debug_glXQueryExtension(Display* dpy, int* errorb, int* event) {
  GL_SERVICE_LOG("glXQueryExtension" << "("  << static_cast<const void*>(dpy) << ", " << static_cast<const void*>(errorb) << ", " << static_cast<const void*>(event) << ")");
  int result = g_debug_glXQueryExtension(dpy, errorb, event);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static int GL_BINDING_CALL Debug_glXQueryVersion(Display* dpy, int* maj, int* min) {
  GL_SERVICE_LOG("glXQueryVersion" << "("  << static_cast<const void*>(dpy) << ", " << static_cast<const void*>(maj) << ", " << static_cast<const void*>(min) << ")");
  int result = g_debug_glXQueryVersion(dpy, maj, min);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static int GL_BINDING_CALL Debug_glXIsDirect(Display* dpy, GLXContext ctx) {
  GL_SERVICE_LOG("glXIsDirect" << "("  << static_cast<const void*>(dpy) << ", " << ctx << ")");
  int result = g_debug_glXIsDirect(dpy, ctx);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static int GL_BINDING_CALL Debug_glXGetConfig(Display* dpy, XVisualInfo* visual, int attrib, int* value) {
  GL_SERVICE_LOG("glXGetConfig" << "("  << static_cast<const void*>(dpy) << ", " << static_cast<const void*>(visual) << ", " << attrib << ", " << static_cast<const void*>(value) << ")");
  int result = g_debug_glXGetConfig(dpy, visual, attrib, value);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLXContext GL_BINDING_CALL Debug_glXGetCurrentContext(void) {
  GL_SERVICE_LOG("glXGetCurrentContext" << "("  << ")");
  GLXContext result = g_debug_glXGetCurrentContext();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLXDrawable GL_BINDING_CALL Debug_glXGetCurrentDrawable(void) {
  GL_SERVICE_LOG("glXGetCurrentDrawable" << "("  << ")");
  GLXDrawable result = g_debug_glXGetCurrentDrawable();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glXWaitGL(void) {
  GL_SERVICE_LOG("glXWaitGL" << "("  << ")");
  g_debug_glXWaitGL();
}

static void GL_BINDING_CALL Debug_glXWaitX(void) {
  GL_SERVICE_LOG("glXWaitX" << "("  << ")");
  g_debug_glXWaitX();
}

static void GL_BINDING_CALL Debug_glXUseXFont(Font font, int first, int count, int list) {
  GL_SERVICE_LOG("glXUseXFont" << "("  << font << ", " << first << ", " << count << ", " << list << ")");
  g_debug_glXUseXFont(font, first, count, list);
}

static const char* GL_BINDING_CALL Debug_glXQueryExtensionsString(Display* dpy, int screen) {
  GL_SERVICE_LOG("glXQueryExtensionsString" << "("  << static_cast<const void*>(dpy) << ", " << screen << ")");
  const char* result = g_debug_glXQueryExtensionsString(dpy, screen);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static const char* GL_BINDING_CALL Debug_glXQueryServerString(Display* dpy, int screen, int name) {
  GL_SERVICE_LOG("glXQueryServerString" << "("  << static_cast<const void*>(dpy) << ", " << screen << ", " << name << ")");
  const char* result = g_debug_glXQueryServerString(dpy, screen, name);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static const char* GL_BINDING_CALL Debug_glXGetClientString(Display* dpy, int name) {
  GL_SERVICE_LOG("glXGetClientString" << "("  << static_cast<const void*>(dpy) << ", " << name << ")");
  const char* result = g_debug_glXGetClientString(dpy, name);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static Display* GL_BINDING_CALL Debug_glXGetCurrentDisplay(void) {
  GL_SERVICE_LOG("glXGetCurrentDisplay" << "("  << ")");
  Display* result = g_debug_glXGetCurrentDisplay();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLXFBConfig* GL_BINDING_CALL Debug_glXChooseFBConfig(Display* dpy, int screen, const int* attribList, int* nitems) {
  GL_SERVICE_LOG("glXChooseFBConfig" << "("  << static_cast<const void*>(dpy) << ", " << screen << ", " << static_cast<const void*>(attribList) << ", " << static_cast<const void*>(nitems) << ")");
  GLXFBConfig* result = g_debug_glXChooseFBConfig(dpy, screen, attribList, nitems);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static int GL_BINDING_CALL Debug_glXGetFBConfigAttrib(Display* dpy, GLXFBConfig config, int attribute, int* value) {
  GL_SERVICE_LOG("glXGetFBConfigAttrib" << "("  << static_cast<const void*>(dpy) << ", " << config << ", " << attribute << ", " << static_cast<const void*>(value) << ")");
  int result = g_debug_glXGetFBConfigAttrib(dpy, config, attribute, value);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLXFBConfig* GL_BINDING_CALL Debug_glXGetFBConfigs(Display* dpy, int screen, int* nelements) {
  GL_SERVICE_LOG("glXGetFBConfigs" << "("  << static_cast<const void*>(dpy) << ", " << screen << ", " << static_cast<const void*>(nelements) << ")");
  GLXFBConfig* result = g_debug_glXGetFBConfigs(dpy, screen, nelements);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static XVisualInfo* GL_BINDING_CALL Debug_glXGetVisualFromFBConfig(Display* dpy, GLXFBConfig config) {
  GL_SERVICE_LOG("glXGetVisualFromFBConfig" << "("  << static_cast<const void*>(dpy) << ", " << config << ")");
  XVisualInfo* result = g_debug_glXGetVisualFromFBConfig(dpy, config);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLXWindow GL_BINDING_CALL Debug_glXCreateWindow(Display* dpy, GLXFBConfig config, Window win, const int* attribList) {
  GL_SERVICE_LOG("glXCreateWindow" << "("  << static_cast<const void*>(dpy) << ", " << config << ", " << win << ", " << static_cast<const void*>(attribList) << ")");
  GLXWindow result = g_debug_glXCreateWindow(dpy, config, win, attribList);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glXDestroyWindow(Display* dpy, GLXWindow window) {
  GL_SERVICE_LOG("glXDestroyWindow" << "("  << static_cast<const void*>(dpy) << ", " << window << ")");
  g_debug_glXDestroyWindow(dpy, window);
}

static GLXPixmap GL_BINDING_CALL Debug_glXCreatePixmap(Display* dpy, GLXFBConfig config, Pixmap pixmap, const int* attribList) {
  GL_SERVICE_LOG("glXCreatePixmap" << "("  << static_cast<const void*>(dpy) << ", " << config << ", " << pixmap << ", " << static_cast<const void*>(attribList) << ")");
  GLXPixmap result = g_debug_glXCreatePixmap(dpy, config, pixmap, attribList);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glXDestroyPixmap(Display* dpy, GLXPixmap pixmap) {
  GL_SERVICE_LOG("glXDestroyPixmap" << "("  << static_cast<const void*>(dpy) << ", " << pixmap << ")");
  g_debug_glXDestroyPixmap(dpy, pixmap);
}

static GLXPbuffer GL_BINDING_CALL Debug_glXCreatePbuffer(Display* dpy, GLXFBConfig config, const int* attribList) {
  GL_SERVICE_LOG("glXCreatePbuffer" << "("  << static_cast<const void*>(dpy) << ", " << config << ", " << static_cast<const void*>(attribList) << ")");
  GLXPbuffer result = g_debug_glXCreatePbuffer(dpy, config, attribList);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glXDestroyPbuffer(Display* dpy, GLXPbuffer pbuf) {
  GL_SERVICE_LOG("glXDestroyPbuffer" << "("  << static_cast<const void*>(dpy) << ", " << pbuf << ")");
  g_debug_glXDestroyPbuffer(dpy, pbuf);
}

static void GL_BINDING_CALL Debug_glXQueryDrawable(Display* dpy, GLXDrawable draw, int attribute, unsigned int* value) {
  GL_SERVICE_LOG("glXQueryDrawable" << "("  << static_cast<const void*>(dpy) << ", " << draw << ", " << attribute << ", " << static_cast<const void*>(value) << ")");
  g_debug_glXQueryDrawable(dpy, draw, attribute, value);
}

static GLXContext GL_BINDING_CALL Debug_glXCreateNewContext(Display* dpy, GLXFBConfig config, int renderType, GLXContext shareList, int direct) {
  GL_SERVICE_LOG("glXCreateNewContext" << "("  << static_cast<const void*>(dpy) << ", " << config << ", " << renderType << ", " << shareList << ", " << direct << ")");
  GLXContext result = g_debug_glXCreateNewContext(dpy, config, renderType, shareList, direct);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static int GL_BINDING_CALL Debug_glXMakeContextCurrent(Display* dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx) {
  GL_SERVICE_LOG("glXMakeContextCurrent" << "("  << static_cast<const void*>(dpy) << ", " << draw << ", " << read << ", " << ctx << ")");
  int result = g_debug_glXMakeContextCurrent(dpy, draw, read, ctx);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLXDrawable GL_BINDING_CALL Debug_glXGetCurrentReadDrawable(void) {
  GL_SERVICE_LOG("glXGetCurrentReadDrawable" << "("  << ")");
  GLXDrawable result = g_debug_glXGetCurrentReadDrawable();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static int GL_BINDING_CALL Debug_glXQueryContext(Display* dpy, GLXContext ctx, int attribute, int* value) {
  GL_SERVICE_LOG("glXQueryContext" << "("  << static_cast<const void*>(dpy) << ", " << ctx << ", " << attribute << ", " << static_cast<const void*>(value) << ")");
  int result = g_debug_glXQueryContext(dpy, ctx, attribute, value);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glXSelectEvent(Display* dpy, GLXDrawable drawable, unsigned long mask) {
  GL_SERVICE_LOG("glXSelectEvent" << "("  << static_cast<const void*>(dpy) << ", " << drawable << ", " << mask << ")");
  g_debug_glXSelectEvent(dpy, drawable, mask);
}

static void GL_BINDING_CALL Debug_glXGetSelectedEvent(Display* dpy, GLXDrawable drawable, unsigned long* mask) {
  GL_SERVICE_LOG("glXGetSelectedEvent" << "("  << static_cast<const void*>(dpy) << ", " << drawable << ", " << static_cast<const void*>(mask) << ")");
  g_debug_glXGetSelectedEvent(dpy, drawable, mask);
}

static void GL_BINDING_CALL Debug_glXSwapIntervalEXT(Display* dpy, GLXDrawable drawable, int interval) {
  GL_SERVICE_LOG("glXSwapIntervalEXT" << "("  << static_cast<const void*>(dpy) << ", " << drawable << ", " << interval << ")");
  g_debug_glXSwapIntervalEXT(dpy, drawable, interval);
}

static GLXFBConfig GL_BINDING_CALL Debug_glXGetFBConfigFromVisualSGIX(Display* dpy, XVisualInfo* visualInfo) {
  GL_SERVICE_LOG("glXGetFBConfigFromVisualSGIX" << "("  << static_cast<const void*>(dpy) << ", " << static_cast<const void*>(visualInfo) << ")");
  GLXFBConfig result = g_debug_glXGetFBConfigFromVisualSGIX(dpy, visualInfo);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLXContext GL_BINDING_CALL Debug_glXCreateContextAttribsARB(Display* dpy, GLXFBConfig config, GLXContext share_context, int direct, const int* attrib_list) {
  GL_SERVICE_LOG("glXCreateContextAttribsARB" << "("  << static_cast<const void*>(dpy) << ", " << config << ", " << share_context << ", " << direct << ", " << static_cast<const void*>(attrib_list) << ")");
  GLXContext result = g_debug_glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}
}  // extern "C"

void InitializeDebugGLBindingsGLX() {
  if (!g_debug_glXChooseVisual) {
    g_debug_glXChooseVisual = g_glXChooseVisual;
    g_glXChooseVisual = Debug_glXChooseVisual;
  }
  if (!g_debug_glXCreateContext) {
    g_debug_glXCreateContext = g_glXCreateContext;
    g_glXCreateContext = Debug_glXCreateContext;
  }
  if (!g_debug_glXBindTexImageEXT) {
    g_debug_glXBindTexImageEXT = g_glXBindTexImageEXT;
    g_glXBindTexImageEXT = Debug_glXBindTexImageEXT;
  }
  if (!g_debug_glXReleaseTexImageEXT) {
    g_debug_glXReleaseTexImageEXT = g_glXReleaseTexImageEXT;
    g_glXReleaseTexImageEXT = Debug_glXReleaseTexImageEXT;
  }
  if (!g_debug_glXDestroyContext) {
    g_debug_glXDestroyContext = g_glXDestroyContext;
    g_glXDestroyContext = Debug_glXDestroyContext;
  }
  if (!g_debug_glXMakeCurrent) {
    g_debug_glXMakeCurrent = g_glXMakeCurrent;
    g_glXMakeCurrent = Debug_glXMakeCurrent;
  }
  if (!g_debug_glXCopyContext) {
    g_debug_glXCopyContext = g_glXCopyContext;
    g_glXCopyContext = Debug_glXCopyContext;
  }
  if (!g_debug_glXSwapBuffers) {
    g_debug_glXSwapBuffers = g_glXSwapBuffers;
    g_glXSwapBuffers = Debug_glXSwapBuffers;
  }
  if (!g_debug_glXCreateGLXPixmap) {
    g_debug_glXCreateGLXPixmap = g_glXCreateGLXPixmap;
    g_glXCreateGLXPixmap = Debug_glXCreateGLXPixmap;
  }
  if (!g_debug_glXDestroyGLXPixmap) {
    g_debug_glXDestroyGLXPixmap = g_glXDestroyGLXPixmap;
    g_glXDestroyGLXPixmap = Debug_glXDestroyGLXPixmap;
  }
  if (!g_debug_glXQueryExtension) {
    g_debug_glXQueryExtension = g_glXQueryExtension;
    g_glXQueryExtension = Debug_glXQueryExtension;
  }
  if (!g_debug_glXQueryVersion) {
    g_debug_glXQueryVersion = g_glXQueryVersion;
    g_glXQueryVersion = Debug_glXQueryVersion;
  }
  if (!g_debug_glXIsDirect) {
    g_debug_glXIsDirect = g_glXIsDirect;
    g_glXIsDirect = Debug_glXIsDirect;
  }
  if (!g_debug_glXGetConfig) {
    g_debug_glXGetConfig = g_glXGetConfig;
    g_glXGetConfig = Debug_glXGetConfig;
  }
  if (!g_debug_glXGetCurrentContext) {
    g_debug_glXGetCurrentContext = g_glXGetCurrentContext;
    g_glXGetCurrentContext = Debug_glXGetCurrentContext;
  }
  if (!g_debug_glXGetCurrentDrawable) {
    g_debug_glXGetCurrentDrawable = g_glXGetCurrentDrawable;
    g_glXGetCurrentDrawable = Debug_glXGetCurrentDrawable;
  }
  if (!g_debug_glXWaitGL) {
    g_debug_glXWaitGL = g_glXWaitGL;
    g_glXWaitGL = Debug_glXWaitGL;
  }
  if (!g_debug_glXWaitX) {
    g_debug_glXWaitX = g_glXWaitX;
    g_glXWaitX = Debug_glXWaitX;
  }
  if (!g_debug_glXUseXFont) {
    g_debug_glXUseXFont = g_glXUseXFont;
    g_glXUseXFont = Debug_glXUseXFont;
  }
  if (!g_debug_glXQueryExtensionsString) {
    g_debug_glXQueryExtensionsString = g_glXQueryExtensionsString;
    g_glXQueryExtensionsString = Debug_glXQueryExtensionsString;
  }
  if (!g_debug_glXQueryServerString) {
    g_debug_glXQueryServerString = g_glXQueryServerString;
    g_glXQueryServerString = Debug_glXQueryServerString;
  }
  if (!g_debug_glXGetClientString) {
    g_debug_glXGetClientString = g_glXGetClientString;
    g_glXGetClientString = Debug_glXGetClientString;
  }
  if (!g_debug_glXGetCurrentDisplay) {
    g_debug_glXGetCurrentDisplay = g_glXGetCurrentDisplay;
    g_glXGetCurrentDisplay = Debug_glXGetCurrentDisplay;
  }
  if (!g_debug_glXChooseFBConfig) {
    g_debug_glXChooseFBConfig = g_glXChooseFBConfig;
    g_glXChooseFBConfig = Debug_glXChooseFBConfig;
  }
  if (!g_debug_glXGetFBConfigAttrib) {
    g_debug_glXGetFBConfigAttrib = g_glXGetFBConfigAttrib;
    g_glXGetFBConfigAttrib = Debug_glXGetFBConfigAttrib;
  }
  if (!g_debug_glXGetFBConfigs) {
    g_debug_glXGetFBConfigs = g_glXGetFBConfigs;
    g_glXGetFBConfigs = Debug_glXGetFBConfigs;
  }
  if (!g_debug_glXGetVisualFromFBConfig) {
    g_debug_glXGetVisualFromFBConfig = g_glXGetVisualFromFBConfig;
    g_glXGetVisualFromFBConfig = Debug_glXGetVisualFromFBConfig;
  }
  if (!g_debug_glXCreateWindow) {
    g_debug_glXCreateWindow = g_glXCreateWindow;
    g_glXCreateWindow = Debug_glXCreateWindow;
  }
  if (!g_debug_glXDestroyWindow) {
    g_debug_glXDestroyWindow = g_glXDestroyWindow;
    g_glXDestroyWindow = Debug_glXDestroyWindow;
  }
  if (!g_debug_glXCreatePixmap) {
    g_debug_glXCreatePixmap = g_glXCreatePixmap;
    g_glXCreatePixmap = Debug_glXCreatePixmap;
  }
  if (!g_debug_glXDestroyPixmap) {
    g_debug_glXDestroyPixmap = g_glXDestroyPixmap;
    g_glXDestroyPixmap = Debug_glXDestroyPixmap;
  }
  if (!g_debug_glXCreatePbuffer) {
    g_debug_glXCreatePbuffer = g_glXCreatePbuffer;
    g_glXCreatePbuffer = Debug_glXCreatePbuffer;
  }
  if (!g_debug_glXDestroyPbuffer) {
    g_debug_glXDestroyPbuffer = g_glXDestroyPbuffer;
    g_glXDestroyPbuffer = Debug_glXDestroyPbuffer;
  }
  if (!g_debug_glXQueryDrawable) {
    g_debug_glXQueryDrawable = g_glXQueryDrawable;
    g_glXQueryDrawable = Debug_glXQueryDrawable;
  }
  if (!g_debug_glXCreateNewContext) {
    g_debug_glXCreateNewContext = g_glXCreateNewContext;
    g_glXCreateNewContext = Debug_glXCreateNewContext;
  }
  if (!g_debug_glXMakeContextCurrent) {
    g_debug_glXMakeContextCurrent = g_glXMakeContextCurrent;
    g_glXMakeContextCurrent = Debug_glXMakeContextCurrent;
  }
  if (!g_debug_glXGetCurrentReadDrawable) {
    g_debug_glXGetCurrentReadDrawable = g_glXGetCurrentReadDrawable;
    g_glXGetCurrentReadDrawable = Debug_glXGetCurrentReadDrawable;
  }
  if (!g_debug_glXQueryContext) {
    g_debug_glXQueryContext = g_glXQueryContext;
    g_glXQueryContext = Debug_glXQueryContext;
  }
  if (!g_debug_glXSelectEvent) {
    g_debug_glXSelectEvent = g_glXSelectEvent;
    g_glXSelectEvent = Debug_glXSelectEvent;
  }
  if (!g_debug_glXGetSelectedEvent) {
    g_debug_glXGetSelectedEvent = g_glXGetSelectedEvent;
    g_glXGetSelectedEvent = Debug_glXGetSelectedEvent;
  }
  if (!g_debug_glXSwapIntervalEXT) {
    g_debug_glXSwapIntervalEXT = g_glXSwapIntervalEXT;
    g_glXSwapIntervalEXT = Debug_glXSwapIntervalEXT;
  }
  if (!g_debug_glXGetFBConfigFromVisualSGIX) {
    g_debug_glXGetFBConfigFromVisualSGIX = g_glXGetFBConfigFromVisualSGIX;
    g_glXGetFBConfigFromVisualSGIX = Debug_glXGetFBConfigFromVisualSGIX;
  }
  if (!g_debug_glXCreateContextAttribsARB) {
    g_debug_glXCreateContextAttribsARB = g_glXCreateContextAttribsARB;
    g_glXCreateContextAttribsARB = Debug_glXCreateContextAttribsARB;
  }
}

}  // namespace gfx
