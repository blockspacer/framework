// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is automatically generated.

#include "ui/gfx/gl/gl_bindings.h"
#include "ui/gfx/gl/gl_implementation.h"

namespace gfx {

glActiveTextureProc g_glActiveTexture;
glAttachShaderProc g_glAttachShader;
glBindAttribLocationProc g_glBindAttribLocation;
glBindBufferProc g_glBindBuffer;
glBindFragDataLocationProc g_glBindFragDataLocation;
glBindFragDataLocationIndexedARBProc g_glBindFragDataLocationIndexedARB;
glBindFramebufferEXTProc g_glBindFramebufferEXT;
glBindRenderbufferEXTProc g_glBindRenderbufferEXT;
glBindTextureProc g_glBindTexture;
glBlendColorProc g_glBlendColor;
glBlendEquationProc g_glBlendEquation;
glBlendEquationSeparateProc g_glBlendEquationSeparate;
glBlendFuncProc g_glBlendFunc;
glBlendFuncSeparateProc g_glBlendFuncSeparate;
glBlitFramebufferEXTProc g_glBlitFramebufferEXT;
glBlitFramebufferANGLEProc g_glBlitFramebufferANGLE;
glBufferDataProc g_glBufferData;
glBufferSubDataProc g_glBufferSubData;
glCheckFramebufferStatusEXTProc g_glCheckFramebufferStatusEXT;
glClearProc g_glClear;
glClearColorProc g_glClearColor;
glClearDepthProc g_glClearDepth;
glClearDepthfProc g_glClearDepthf;
glClearStencilProc g_glClearStencil;
glColorMaskProc g_glColorMask;
glCompileShaderProc g_glCompileShader;
glCompressedTexImage2DProc g_glCompressedTexImage2D;
glCompressedTexSubImage2DProc g_glCompressedTexSubImage2D;
glCopyTexImage2DProc g_glCopyTexImage2D;
glCopyTexSubImage2DProc g_glCopyTexSubImage2D;
glCreateProgramProc g_glCreateProgram;
glCreateShaderProc g_glCreateShader;
glCullFaceProc g_glCullFace;
glDeleteBuffersARBProc g_glDeleteBuffersARB;
glDeleteFramebuffersEXTProc g_glDeleteFramebuffersEXT;
glDeleteProgramProc g_glDeleteProgram;
glDeleteRenderbuffersEXTProc g_glDeleteRenderbuffersEXT;
glDeleteShaderProc g_glDeleteShader;
glDeleteTexturesProc g_glDeleteTextures;
glDepthFuncProc g_glDepthFunc;
glDepthMaskProc g_glDepthMask;
glDepthRangeProc g_glDepthRange;
glDepthRangefProc g_glDepthRangef;
glDetachShaderProc g_glDetachShader;
glDisableProc g_glDisable;
glDisableVertexAttribArrayProc g_glDisableVertexAttribArray;
glDrawArraysProc g_glDrawArrays;
glDrawBufferProc g_glDrawBuffer;
glDrawBuffersARBProc g_glDrawBuffersARB;
glDrawElementsProc g_glDrawElements;
glEGLImageTargetTexture2DOESProc g_glEGLImageTargetTexture2DOES;
glEnableProc g_glEnable;
glEnableVertexAttribArrayProc g_glEnableVertexAttribArray;
glFinishProc g_glFinish;
glFlushProc g_glFlush;
glFramebufferRenderbufferEXTProc g_glFramebufferRenderbufferEXT;
glFramebufferTexture2DEXTProc g_glFramebufferTexture2DEXT;
glFrontFaceProc g_glFrontFace;
glGenBuffersARBProc g_glGenBuffersARB;
glGenerateMipmapEXTProc g_glGenerateMipmapEXT;
glGenFramebuffersEXTProc g_glGenFramebuffersEXT;
glGenRenderbuffersEXTProc g_glGenRenderbuffersEXT;
glGenTexturesProc g_glGenTextures;
glGetActiveAttribProc g_glGetActiveAttrib;
glGetActiveUniformProc g_glGetActiveUniform;
glGetAttachedShadersProc g_glGetAttachedShaders;
glGetAttribLocationProc g_glGetAttribLocation;
glGetBooleanvProc g_glGetBooleanv;
glGetBufferParameterivProc g_glGetBufferParameteriv;
glGetErrorProc g_glGetError;
glGetFloatvProc g_glGetFloatv;
glGetFramebufferAttachmentParameterivEXTProc g_glGetFramebufferAttachmentParameterivEXT;
glGetGraphicsResetStatusARBProc g_glGetGraphicsResetStatusARB;
glGetIntegervProc g_glGetIntegerv;
glGetProgramivProc g_glGetProgramiv;
glGetProgramInfoLogProc g_glGetProgramInfoLog;
glGetRenderbufferParameterivEXTProc g_glGetRenderbufferParameterivEXT;
glGetShaderivProc g_glGetShaderiv;
glGetShaderInfoLogProc g_glGetShaderInfoLog;
glGetShaderPrecisionFormatProc g_glGetShaderPrecisionFormat;
glGetShaderSourceProc g_glGetShaderSource;
glGetStringProc g_glGetString;
glGetTexLevelParameterfvProc g_glGetTexLevelParameterfv;
glGetTexLevelParameterivProc g_glGetTexLevelParameteriv;
glGetTexParameterfvProc g_glGetTexParameterfv;
glGetTexParameterivProc g_glGetTexParameteriv;
glGetTranslatedShaderSourceANGLEProc g_glGetTranslatedShaderSourceANGLE;
glGetUniformfvProc g_glGetUniformfv;
glGetUniformivProc g_glGetUniformiv;
glGetUniformLocationProc g_glGetUniformLocation;
glGetVertexAttribfvProc g_glGetVertexAttribfv;
glGetVertexAttribivProc g_glGetVertexAttribiv;
glGetVertexAttribPointervProc g_glGetVertexAttribPointerv;
glHintProc g_glHint;
glIsBufferProc g_glIsBuffer;
glIsEnabledProc g_glIsEnabled;
glIsFramebufferEXTProc g_glIsFramebufferEXT;
glIsProgramProc g_glIsProgram;
glIsRenderbufferEXTProc g_glIsRenderbufferEXT;
glIsShaderProc g_glIsShader;
glIsTextureProc g_glIsTexture;
glLineWidthProc g_glLineWidth;
glLinkProgramProc g_glLinkProgram;
glMapBufferProc g_glMapBuffer;
glPixelStoreiProc g_glPixelStorei;
glPolygonOffsetProc g_glPolygonOffset;
glReadBufferProc g_glReadBuffer;
glReadPixelsProc g_glReadPixels;
glReleaseShaderCompilerProc g_glReleaseShaderCompiler;
glRenderbufferStorageMultisampleEXTProc g_glRenderbufferStorageMultisampleEXT;
glRenderbufferStorageMultisampleANGLEProc g_glRenderbufferStorageMultisampleANGLE;
glRenderbufferStorageEXTProc g_glRenderbufferStorageEXT;
glSampleCoverageProc g_glSampleCoverage;
glScissorProc g_glScissor;
glShaderBinaryProc g_glShaderBinary;
glShaderSourceProc g_glShaderSource;
glStencilFuncProc g_glStencilFunc;
glStencilFuncSeparateProc g_glStencilFuncSeparate;
glStencilMaskProc g_glStencilMask;
glStencilMaskSeparateProc g_glStencilMaskSeparate;
glStencilOpProc g_glStencilOp;
glStencilOpSeparateProc g_glStencilOpSeparate;
glTexImage2DProc g_glTexImage2D;
glTexParameterfProc g_glTexParameterf;
glTexParameterfvProc g_glTexParameterfv;
glTexParameteriProc g_glTexParameteri;
glTexParameterivProc g_glTexParameteriv;
glTexSubImage2DProc g_glTexSubImage2D;
glUniform1fProc g_glUniform1f;
glUniform1fvProc g_glUniform1fv;
glUniform1iProc g_glUniform1i;
glUniform1ivProc g_glUniform1iv;
glUniform2fProc g_glUniform2f;
glUniform2fvProc g_glUniform2fv;
glUniform2iProc g_glUniform2i;
glUniform2ivProc g_glUniform2iv;
glUniform3fProc g_glUniform3f;
glUniform3fvProc g_glUniform3fv;
glUniform3iProc g_glUniform3i;
glUniform3ivProc g_glUniform3iv;
glUniform4fProc g_glUniform4f;
glUniform4fvProc g_glUniform4fv;
glUniform4iProc g_glUniform4i;
glUniform4ivProc g_glUniform4iv;
glUniformMatrix2fvProc g_glUniformMatrix2fv;
glUniformMatrix3fvProc g_glUniformMatrix3fv;
glUniformMatrix4fvProc g_glUniformMatrix4fv;
glUnmapBufferProc g_glUnmapBuffer;
glUseProgramProc g_glUseProgram;
glValidateProgramProc g_glValidateProgram;
glVertexAttrib1fProc g_glVertexAttrib1f;
glVertexAttrib1fvProc g_glVertexAttrib1fv;
glVertexAttrib2fProc g_glVertexAttrib2f;
glVertexAttrib2fvProc g_glVertexAttrib2fv;
glVertexAttrib3fProc g_glVertexAttrib3f;
glVertexAttrib3fvProc g_glVertexAttrib3fv;
glVertexAttrib4fProc g_glVertexAttrib4f;
glVertexAttrib4fvProc g_glVertexAttrib4fv;
glVertexAttribPointerProc g_glVertexAttribPointer;
glViewportProc g_glViewport;
glGenFencesNVProc g_glGenFencesNV;
glDeleteFencesNVProc g_glDeleteFencesNV;
glSetFenceNVProc g_glSetFenceNV;
glTestFenceNVProc g_glTestFenceNV;
glFinishFenceNVProc g_glFinishFenceNV;
glIsFenceNVProc g_glIsFenceNV;
glGetFenceivNVProc g_glGetFenceivNV;

static glActiveTextureProc g_debug_glActiveTexture;
static glAttachShaderProc g_debug_glAttachShader;
static glBindAttribLocationProc g_debug_glBindAttribLocation;
static glBindBufferProc g_debug_glBindBuffer;
static glBindFragDataLocationProc g_debug_glBindFragDataLocation;
static glBindFragDataLocationIndexedARBProc g_debug_glBindFragDataLocationIndexedARB;
static glBindFramebufferEXTProc g_debug_glBindFramebufferEXT;
static glBindRenderbufferEXTProc g_debug_glBindRenderbufferEXT;
static glBindTextureProc g_debug_glBindTexture;
static glBlendColorProc g_debug_glBlendColor;
static glBlendEquationProc g_debug_glBlendEquation;
static glBlendEquationSeparateProc g_debug_glBlendEquationSeparate;
static glBlendFuncProc g_debug_glBlendFunc;
static glBlendFuncSeparateProc g_debug_glBlendFuncSeparate;
static glBlitFramebufferEXTProc g_debug_glBlitFramebufferEXT;
static glBlitFramebufferANGLEProc g_debug_glBlitFramebufferANGLE;
static glBufferDataProc g_debug_glBufferData;
static glBufferSubDataProc g_debug_glBufferSubData;
static glCheckFramebufferStatusEXTProc g_debug_glCheckFramebufferStatusEXT;
static glClearProc g_debug_glClear;
static glClearColorProc g_debug_glClearColor;
static glClearDepthProc g_debug_glClearDepth;
static glClearDepthfProc g_debug_glClearDepthf;
static glClearStencilProc g_debug_glClearStencil;
static glColorMaskProc g_debug_glColorMask;
static glCompileShaderProc g_debug_glCompileShader;
static glCompressedTexImage2DProc g_debug_glCompressedTexImage2D;
static glCompressedTexSubImage2DProc g_debug_glCompressedTexSubImage2D;
static glCopyTexImage2DProc g_debug_glCopyTexImage2D;
static glCopyTexSubImage2DProc g_debug_glCopyTexSubImage2D;
static glCreateProgramProc g_debug_glCreateProgram;
static glCreateShaderProc g_debug_glCreateShader;
static glCullFaceProc g_debug_glCullFace;
static glDeleteBuffersARBProc g_debug_glDeleteBuffersARB;
static glDeleteFramebuffersEXTProc g_debug_glDeleteFramebuffersEXT;
static glDeleteProgramProc g_debug_glDeleteProgram;
static glDeleteRenderbuffersEXTProc g_debug_glDeleteRenderbuffersEXT;
static glDeleteShaderProc g_debug_glDeleteShader;
static glDeleteTexturesProc g_debug_glDeleteTextures;
static glDepthFuncProc g_debug_glDepthFunc;
static glDepthMaskProc g_debug_glDepthMask;
static glDepthRangeProc g_debug_glDepthRange;
static glDepthRangefProc g_debug_glDepthRangef;
static glDetachShaderProc g_debug_glDetachShader;
static glDisableProc g_debug_glDisable;
static glDisableVertexAttribArrayProc g_debug_glDisableVertexAttribArray;
static glDrawArraysProc g_debug_glDrawArrays;
static glDrawBufferProc g_debug_glDrawBuffer;
static glDrawBuffersARBProc g_debug_glDrawBuffersARB;
static glDrawElementsProc g_debug_glDrawElements;
static glEGLImageTargetTexture2DOESProc g_debug_glEGLImageTargetTexture2DOES;
static glEnableProc g_debug_glEnable;
static glEnableVertexAttribArrayProc g_debug_glEnableVertexAttribArray;
static glFinishProc g_debug_glFinish;
static glFlushProc g_debug_glFlush;
static glFramebufferRenderbufferEXTProc g_debug_glFramebufferRenderbufferEXT;
static glFramebufferTexture2DEXTProc g_debug_glFramebufferTexture2DEXT;
static glFrontFaceProc g_debug_glFrontFace;
static glGenBuffersARBProc g_debug_glGenBuffersARB;
static glGenerateMipmapEXTProc g_debug_glGenerateMipmapEXT;
static glGenFramebuffersEXTProc g_debug_glGenFramebuffersEXT;
static glGenRenderbuffersEXTProc g_debug_glGenRenderbuffersEXT;
static glGenTexturesProc g_debug_glGenTextures;
static glGetActiveAttribProc g_debug_glGetActiveAttrib;
static glGetActiveUniformProc g_debug_glGetActiveUniform;
static glGetAttachedShadersProc g_debug_glGetAttachedShaders;
static glGetAttribLocationProc g_debug_glGetAttribLocation;
static glGetBooleanvProc g_debug_glGetBooleanv;
static glGetBufferParameterivProc g_debug_glGetBufferParameteriv;
static glGetErrorProc g_debug_glGetError;
static glGetFloatvProc g_debug_glGetFloatv;
static glGetFramebufferAttachmentParameterivEXTProc g_debug_glGetFramebufferAttachmentParameterivEXT;
static glGetGraphicsResetStatusARBProc g_debug_glGetGraphicsResetStatusARB;
static glGetIntegervProc g_debug_glGetIntegerv;
static glGetProgramivProc g_debug_glGetProgramiv;
static glGetProgramInfoLogProc g_debug_glGetProgramInfoLog;
static glGetRenderbufferParameterivEXTProc g_debug_glGetRenderbufferParameterivEXT;
static glGetShaderivProc g_debug_glGetShaderiv;
static glGetShaderInfoLogProc g_debug_glGetShaderInfoLog;
static glGetShaderPrecisionFormatProc g_debug_glGetShaderPrecisionFormat;
static glGetShaderSourceProc g_debug_glGetShaderSource;
static glGetStringProc g_debug_glGetString;
static glGetTexLevelParameterfvProc g_debug_glGetTexLevelParameterfv;
static glGetTexLevelParameterivProc g_debug_glGetTexLevelParameteriv;
static glGetTexParameterfvProc g_debug_glGetTexParameterfv;
static glGetTexParameterivProc g_debug_glGetTexParameteriv;
static glGetTranslatedShaderSourceANGLEProc g_debug_glGetTranslatedShaderSourceANGLE;
static glGetUniformfvProc g_debug_glGetUniformfv;
static glGetUniformivProc g_debug_glGetUniformiv;
static glGetUniformLocationProc g_debug_glGetUniformLocation;
static glGetVertexAttribfvProc g_debug_glGetVertexAttribfv;
static glGetVertexAttribivProc g_debug_glGetVertexAttribiv;
static glGetVertexAttribPointervProc g_debug_glGetVertexAttribPointerv;
static glHintProc g_debug_glHint;
static glIsBufferProc g_debug_glIsBuffer;
static glIsEnabledProc g_debug_glIsEnabled;
static glIsFramebufferEXTProc g_debug_glIsFramebufferEXT;
static glIsProgramProc g_debug_glIsProgram;
static glIsRenderbufferEXTProc g_debug_glIsRenderbufferEXT;
static glIsShaderProc g_debug_glIsShader;
static glIsTextureProc g_debug_glIsTexture;
static glLineWidthProc g_debug_glLineWidth;
static glLinkProgramProc g_debug_glLinkProgram;
static glMapBufferProc g_debug_glMapBuffer;
static glPixelStoreiProc g_debug_glPixelStorei;
static glPolygonOffsetProc g_debug_glPolygonOffset;
static glReadBufferProc g_debug_glReadBuffer;
static glReadPixelsProc g_debug_glReadPixels;
static glReleaseShaderCompilerProc g_debug_glReleaseShaderCompiler;
static glRenderbufferStorageMultisampleEXTProc g_debug_glRenderbufferStorageMultisampleEXT;
static glRenderbufferStorageMultisampleANGLEProc g_debug_glRenderbufferStorageMultisampleANGLE;
static glRenderbufferStorageEXTProc g_debug_glRenderbufferStorageEXT;
static glSampleCoverageProc g_debug_glSampleCoverage;
static glScissorProc g_debug_glScissor;
static glShaderBinaryProc g_debug_glShaderBinary;
static glShaderSourceProc g_debug_glShaderSource;
static glStencilFuncProc g_debug_glStencilFunc;
static glStencilFuncSeparateProc g_debug_glStencilFuncSeparate;
static glStencilMaskProc g_debug_glStencilMask;
static glStencilMaskSeparateProc g_debug_glStencilMaskSeparate;
static glStencilOpProc g_debug_glStencilOp;
static glStencilOpSeparateProc g_debug_glStencilOpSeparate;
static glTexImage2DProc g_debug_glTexImage2D;
static glTexParameterfProc g_debug_glTexParameterf;
static glTexParameterfvProc g_debug_glTexParameterfv;
static glTexParameteriProc g_debug_glTexParameteri;
static glTexParameterivProc g_debug_glTexParameteriv;
static glTexSubImage2DProc g_debug_glTexSubImage2D;
static glUniform1fProc g_debug_glUniform1f;
static glUniform1fvProc g_debug_glUniform1fv;
static glUniform1iProc g_debug_glUniform1i;
static glUniform1ivProc g_debug_glUniform1iv;
static glUniform2fProc g_debug_glUniform2f;
static glUniform2fvProc g_debug_glUniform2fv;
static glUniform2iProc g_debug_glUniform2i;
static glUniform2ivProc g_debug_glUniform2iv;
static glUniform3fProc g_debug_glUniform3f;
static glUniform3fvProc g_debug_glUniform3fv;
static glUniform3iProc g_debug_glUniform3i;
static glUniform3ivProc g_debug_glUniform3iv;
static glUniform4fProc g_debug_glUniform4f;
static glUniform4fvProc g_debug_glUniform4fv;
static glUniform4iProc g_debug_glUniform4i;
static glUniform4ivProc g_debug_glUniform4iv;
static glUniformMatrix2fvProc g_debug_glUniformMatrix2fv;
static glUniformMatrix3fvProc g_debug_glUniformMatrix3fv;
static glUniformMatrix4fvProc g_debug_glUniformMatrix4fv;
static glUnmapBufferProc g_debug_glUnmapBuffer;
static glUseProgramProc g_debug_glUseProgram;
static glValidateProgramProc g_debug_glValidateProgram;
static glVertexAttrib1fProc g_debug_glVertexAttrib1f;
static glVertexAttrib1fvProc g_debug_glVertexAttrib1fv;
static glVertexAttrib2fProc g_debug_glVertexAttrib2f;
static glVertexAttrib2fvProc g_debug_glVertexAttrib2fv;
static glVertexAttrib3fProc g_debug_glVertexAttrib3f;
static glVertexAttrib3fvProc g_debug_glVertexAttrib3fv;
static glVertexAttrib4fProc g_debug_glVertexAttrib4f;
static glVertexAttrib4fvProc g_debug_glVertexAttrib4fv;
static glVertexAttribPointerProc g_debug_glVertexAttribPointer;
static glViewportProc g_debug_glViewport;
static glGenFencesNVProc g_debug_glGenFencesNV;
static glDeleteFencesNVProc g_debug_glDeleteFencesNV;
static glSetFenceNVProc g_debug_glSetFenceNV;
static glTestFenceNVProc g_debug_glTestFenceNV;
static glFinishFenceNVProc g_debug_glFinishFenceNV;
static glIsFenceNVProc g_debug_glIsFenceNV;
static glGetFenceivNVProc g_debug_glGetFenceivNV;

void InitializeGLBindingsGL() {
  if (!g_glActiveTexture)
    g_glActiveTexture = reinterpret_cast<glActiveTextureProc>(GetGLProcAddress("glActiveTexture"));
  if (!g_glAttachShader)
    g_glAttachShader = reinterpret_cast<glAttachShaderProc>(GetGLProcAddress("glAttachShader"));
  if (!g_glBindAttribLocation)
    g_glBindAttribLocation = reinterpret_cast<glBindAttribLocationProc>(GetGLProcAddress("glBindAttribLocation"));
  if (!g_glBindBuffer)
    g_glBindBuffer = reinterpret_cast<glBindBufferProc>(GetGLProcAddress("glBindBuffer"));
  if (!g_glBindFragDataLocation)
    g_glBindFragDataLocation = reinterpret_cast<glBindFragDataLocationProc>(GetGLProcAddress("glBindFragDataLocation"));
  if (!g_glBindFragDataLocationIndexedARB)
    g_glBindFragDataLocationIndexedARB = reinterpret_cast<glBindFragDataLocationIndexedARBProc>(GetGLProcAddress("glBindFragDataLocationIndexedARB"));
  if (!g_glBindFramebufferEXT)
    g_glBindFramebufferEXT = reinterpret_cast<glBindFramebufferEXTProc>(GetGLProcAddress("glBindFramebufferEXT"));
  if (!g_glBindFramebufferEXT)
    g_glBindFramebufferEXT = reinterpret_cast<glBindFramebufferEXTProc>(GetGLProcAddress("glBindFramebuffer"));
  if (!g_glBindRenderbufferEXT)
    g_glBindRenderbufferEXT = reinterpret_cast<glBindRenderbufferEXTProc>(GetGLProcAddress("glBindRenderbufferEXT"));
  if (!g_glBindRenderbufferEXT)
    g_glBindRenderbufferEXT = reinterpret_cast<glBindRenderbufferEXTProc>(GetGLProcAddress("glBindRenderbuffer"));
  if (!g_glBindTexture)
    g_glBindTexture = reinterpret_cast<glBindTextureProc>(GetGLProcAddress("glBindTexture"));
  if (!g_glBlendColor)
    g_glBlendColor = reinterpret_cast<glBlendColorProc>(GetGLProcAddress("glBlendColor"));
  if (!g_glBlendEquation)
    g_glBlendEquation = reinterpret_cast<glBlendEquationProc>(GetGLProcAddress("glBlendEquation"));
  if (!g_glBlendEquationSeparate)
    g_glBlendEquationSeparate = reinterpret_cast<glBlendEquationSeparateProc>(GetGLProcAddress("glBlendEquationSeparate"));
  if (!g_glBlendFunc)
    g_glBlendFunc = reinterpret_cast<glBlendFuncProc>(GetGLProcAddress("glBlendFunc"));
  if (!g_glBlendFuncSeparate)
    g_glBlendFuncSeparate = reinterpret_cast<glBlendFuncSeparateProc>(GetGLProcAddress("glBlendFuncSeparate"));
  if (!g_glBlitFramebufferEXT)
    g_glBlitFramebufferEXT = reinterpret_cast<glBlitFramebufferEXTProc>(GetGLProcAddress("glBlitFramebufferEXT"));
  if (!g_glBlitFramebufferEXT)
    g_glBlitFramebufferEXT = reinterpret_cast<glBlitFramebufferEXTProc>(GetGLProcAddress("BlitFramebuffer"));
  if (!g_glBlitFramebufferANGLE)
    g_glBlitFramebufferANGLE = reinterpret_cast<glBlitFramebufferANGLEProc>(GetGLProcAddress("glBlitFramebufferANGLE"));
  if (!g_glBlitFramebufferANGLE)
    g_glBlitFramebufferANGLE = reinterpret_cast<glBlitFramebufferANGLEProc>(GetGLProcAddress("BlitFramebuffer"));
  if (!g_glBufferData)
    g_glBufferData = reinterpret_cast<glBufferDataProc>(GetGLProcAddress("glBufferData"));
  if (!g_glBufferSubData)
    g_glBufferSubData = reinterpret_cast<glBufferSubDataProc>(GetGLProcAddress("glBufferSubData"));
  if (!g_glCheckFramebufferStatusEXT)
    g_glCheckFramebufferStatusEXT = reinterpret_cast<glCheckFramebufferStatusEXTProc>(GetGLProcAddress("glCheckFramebufferStatusEXT"));
  if (!g_glCheckFramebufferStatusEXT)
    g_glCheckFramebufferStatusEXT = reinterpret_cast<glCheckFramebufferStatusEXTProc>(GetGLProcAddress("glCheckFramebufferStatus"));
  if (!g_glClear)
    g_glClear = reinterpret_cast<glClearProc>(GetGLProcAddress("glClear"));
  if (!g_glClearColor)
    g_glClearColor = reinterpret_cast<glClearColorProc>(GetGLProcAddress("glClearColor"));
  if (!g_glClearDepth)
    g_glClearDepth = reinterpret_cast<glClearDepthProc>(GetGLProcAddress("glClearDepth"));
  if (!g_glClearDepthf)
    g_glClearDepthf = reinterpret_cast<glClearDepthfProc>(GetGLProcAddress("glClearDepthf"));
  if (!g_glClearStencil)
    g_glClearStencil = reinterpret_cast<glClearStencilProc>(GetGLProcAddress("glClearStencil"));
  if (!g_glColorMask)
    g_glColorMask = reinterpret_cast<glColorMaskProc>(GetGLProcAddress("glColorMask"));
  if (!g_glCompileShader)
    g_glCompileShader = reinterpret_cast<glCompileShaderProc>(GetGLProcAddress("glCompileShader"));
  if (!g_glCompressedTexImage2D)
    g_glCompressedTexImage2D = reinterpret_cast<glCompressedTexImage2DProc>(GetGLProcAddress("glCompressedTexImage2D"));
  if (!g_glCompressedTexSubImage2D)
    g_glCompressedTexSubImage2D = reinterpret_cast<glCompressedTexSubImage2DProc>(GetGLProcAddress("glCompressedTexSubImage2D"));
  if (!g_glCopyTexImage2D)
    g_glCopyTexImage2D = reinterpret_cast<glCopyTexImage2DProc>(GetGLProcAddress("glCopyTexImage2D"));
  if (!g_glCopyTexSubImage2D)
    g_glCopyTexSubImage2D = reinterpret_cast<glCopyTexSubImage2DProc>(GetGLProcAddress("glCopyTexSubImage2D"));
  if (!g_glCreateProgram)
    g_glCreateProgram = reinterpret_cast<glCreateProgramProc>(GetGLProcAddress("glCreateProgram"));
  if (!g_glCreateShader)
    g_glCreateShader = reinterpret_cast<glCreateShaderProc>(GetGLProcAddress("glCreateShader"));
  if (!g_glCullFace)
    g_glCullFace = reinterpret_cast<glCullFaceProc>(GetGLProcAddress("glCullFace"));
  if (!g_glDeleteBuffersARB)
    g_glDeleteBuffersARB = reinterpret_cast<glDeleteBuffersARBProc>(GetGLProcAddress("glDeleteBuffersARB"));
  if (!g_glDeleteBuffersARB)
    g_glDeleteBuffersARB = reinterpret_cast<glDeleteBuffersARBProc>(GetGLProcAddress("glDeleteBuffers"));
  if (!g_glDeleteFramebuffersEXT)
    g_glDeleteFramebuffersEXT = reinterpret_cast<glDeleteFramebuffersEXTProc>(GetGLProcAddress("glDeleteFramebuffersEXT"));
  if (!g_glDeleteFramebuffersEXT)
    g_glDeleteFramebuffersEXT = reinterpret_cast<glDeleteFramebuffersEXTProc>(GetGLProcAddress("glDeleteFramebuffers"));
  if (!g_glDeleteProgram)
    g_glDeleteProgram = reinterpret_cast<glDeleteProgramProc>(GetGLProcAddress("glDeleteProgram"));
  if (!g_glDeleteRenderbuffersEXT)
    g_glDeleteRenderbuffersEXT = reinterpret_cast<glDeleteRenderbuffersEXTProc>(GetGLProcAddress("glDeleteRenderbuffersEXT"));
  if (!g_glDeleteRenderbuffersEXT)
    g_glDeleteRenderbuffersEXT = reinterpret_cast<glDeleteRenderbuffersEXTProc>(GetGLProcAddress("glDeleteRenderbuffers"));
  if (!g_glDeleteShader)
    g_glDeleteShader = reinterpret_cast<glDeleteShaderProc>(GetGLProcAddress("glDeleteShader"));
  if (!g_glDeleteTextures)
    g_glDeleteTextures = reinterpret_cast<glDeleteTexturesProc>(GetGLProcAddress("glDeleteTextures"));
  if (!g_glDepthFunc)
    g_glDepthFunc = reinterpret_cast<glDepthFuncProc>(GetGLProcAddress("glDepthFunc"));
  if (!g_glDepthMask)
    g_glDepthMask = reinterpret_cast<glDepthMaskProc>(GetGLProcAddress("glDepthMask"));
  if (!g_glDepthRange)
    g_glDepthRange = reinterpret_cast<glDepthRangeProc>(GetGLProcAddress("glDepthRange"));
  if (!g_glDepthRangef)
    g_glDepthRangef = reinterpret_cast<glDepthRangefProc>(GetGLProcAddress("glDepthRangef"));
  if (!g_glDetachShader)
    g_glDetachShader = reinterpret_cast<glDetachShaderProc>(GetGLProcAddress("glDetachShader"));
  if (!g_glDisable)
    g_glDisable = reinterpret_cast<glDisableProc>(GetGLProcAddress("glDisable"));
  if (!g_glDisableVertexAttribArray)
    g_glDisableVertexAttribArray = reinterpret_cast<glDisableVertexAttribArrayProc>(GetGLProcAddress("glDisableVertexAttribArray"));
  if (!g_glDrawArrays)
    g_glDrawArrays = reinterpret_cast<glDrawArraysProc>(GetGLProcAddress("glDrawArrays"));
  if (!g_glDrawBuffer)
    g_glDrawBuffer = reinterpret_cast<glDrawBufferProc>(GetGLProcAddress("glDrawBuffer"));
  if (!g_glDrawBuffersARB)
    g_glDrawBuffersARB = reinterpret_cast<glDrawBuffersARBProc>(GetGLProcAddress("glDrawBuffersARB"));
  if (!g_glDrawElements)
    g_glDrawElements = reinterpret_cast<glDrawElementsProc>(GetGLProcAddress("glDrawElements"));
  if (!g_glEGLImageTargetTexture2DOES)
    g_glEGLImageTargetTexture2DOES = reinterpret_cast<glEGLImageTargetTexture2DOESProc>(GetGLProcAddress("glEGLImageTargetTexture2DOES"));
  if (!g_glEnable)
    g_glEnable = reinterpret_cast<glEnableProc>(GetGLProcAddress("glEnable"));
  if (!g_glEnableVertexAttribArray)
    g_glEnableVertexAttribArray = reinterpret_cast<glEnableVertexAttribArrayProc>(GetGLProcAddress("glEnableVertexAttribArray"));
  if (!g_glFinish)
    g_glFinish = reinterpret_cast<glFinishProc>(GetGLProcAddress("glFinish"));
  if (!g_glFlush)
    g_glFlush = reinterpret_cast<glFlushProc>(GetGLProcAddress("glFlush"));
  if (!g_glFramebufferRenderbufferEXT)
    g_glFramebufferRenderbufferEXT = reinterpret_cast<glFramebufferRenderbufferEXTProc>(GetGLProcAddress("glFramebufferRenderbufferEXT"));
  if (!g_glFramebufferRenderbufferEXT)
    g_glFramebufferRenderbufferEXT = reinterpret_cast<glFramebufferRenderbufferEXTProc>(GetGLProcAddress("glFramebufferRenderbuffer"));
  if (!g_glFramebufferTexture2DEXT)
    g_glFramebufferTexture2DEXT = reinterpret_cast<glFramebufferTexture2DEXTProc>(GetGLProcAddress("glFramebufferTexture2DEXT"));
  if (!g_glFramebufferTexture2DEXT)
    g_glFramebufferTexture2DEXT = reinterpret_cast<glFramebufferTexture2DEXTProc>(GetGLProcAddress("glFramebufferTexture2D"));
  if (!g_glFrontFace)
    g_glFrontFace = reinterpret_cast<glFrontFaceProc>(GetGLProcAddress("glFrontFace"));
  if (!g_glGenBuffersARB)
    g_glGenBuffersARB = reinterpret_cast<glGenBuffersARBProc>(GetGLProcAddress("glGenBuffersARB"));
  if (!g_glGenBuffersARB)
    g_glGenBuffersARB = reinterpret_cast<glGenBuffersARBProc>(GetGLProcAddress("glGenBuffers"));
  if (!g_glGenerateMipmapEXT)
    g_glGenerateMipmapEXT = reinterpret_cast<glGenerateMipmapEXTProc>(GetGLProcAddress("glGenerateMipmapEXT"));
  if (!g_glGenerateMipmapEXT)
    g_glGenerateMipmapEXT = reinterpret_cast<glGenerateMipmapEXTProc>(GetGLProcAddress("glGenerateMipmap"));
  if (!g_glGenFramebuffersEXT)
    g_glGenFramebuffersEXT = reinterpret_cast<glGenFramebuffersEXTProc>(GetGLProcAddress("glGenFramebuffersEXT"));
  if (!g_glGenFramebuffersEXT)
    g_glGenFramebuffersEXT = reinterpret_cast<glGenFramebuffersEXTProc>(GetGLProcAddress("glGenFramebuffers"));
  if (!g_glGenRenderbuffersEXT)
    g_glGenRenderbuffersEXT = reinterpret_cast<glGenRenderbuffersEXTProc>(GetGLProcAddress("glGenRenderbuffersEXT"));
  if (!g_glGenRenderbuffersEXT)
    g_glGenRenderbuffersEXT = reinterpret_cast<glGenRenderbuffersEXTProc>(GetGLProcAddress("glGenRenderbuffers"));
  if (!g_glGenTextures)
    g_glGenTextures = reinterpret_cast<glGenTexturesProc>(GetGLProcAddress("glGenTextures"));
  if (!g_glGetActiveAttrib)
    g_glGetActiveAttrib = reinterpret_cast<glGetActiveAttribProc>(GetGLProcAddress("glGetActiveAttrib"));
  if (!g_glGetActiveUniform)
    g_glGetActiveUniform = reinterpret_cast<glGetActiveUniformProc>(GetGLProcAddress("glGetActiveUniform"));
  if (!g_glGetAttachedShaders)
    g_glGetAttachedShaders = reinterpret_cast<glGetAttachedShadersProc>(GetGLProcAddress("glGetAttachedShaders"));
  if (!g_glGetAttribLocation)
    g_glGetAttribLocation = reinterpret_cast<glGetAttribLocationProc>(GetGLProcAddress("glGetAttribLocation"));
  if (!g_glGetBooleanv)
    g_glGetBooleanv = reinterpret_cast<glGetBooleanvProc>(GetGLProcAddress("glGetBooleanv"));
  if (!g_glGetBufferParameteriv)
    g_glGetBufferParameteriv = reinterpret_cast<glGetBufferParameterivProc>(GetGLProcAddress("glGetBufferParameteriv"));
  if (!g_glGetError)
    g_glGetError = reinterpret_cast<glGetErrorProc>(GetGLProcAddress("glGetError"));
  if (!g_glGetFloatv)
    g_glGetFloatv = reinterpret_cast<glGetFloatvProc>(GetGLProcAddress("glGetFloatv"));
  if (!g_glGetFramebufferAttachmentParameterivEXT)
    g_glGetFramebufferAttachmentParameterivEXT = reinterpret_cast<glGetFramebufferAttachmentParameterivEXTProc>(GetGLProcAddress("glGetFramebufferAttachmentParameterivEXT"));
  if (!g_glGetFramebufferAttachmentParameterivEXT)
    g_glGetFramebufferAttachmentParameterivEXT = reinterpret_cast<glGetFramebufferAttachmentParameterivEXTProc>(GetGLProcAddress("glGetFramebufferAttachmentParameteriv"));
  if (!g_glGetGraphicsResetStatusARB)
    g_glGetGraphicsResetStatusARB = reinterpret_cast<glGetGraphicsResetStatusARBProc>(GetGLProcAddress("glGetGraphicsResetStatusARB"));
  if (!g_glGetIntegerv)
    g_glGetIntegerv = reinterpret_cast<glGetIntegervProc>(GetGLProcAddress("glGetIntegerv"));
  if (!g_glGetProgramiv)
    g_glGetProgramiv = reinterpret_cast<glGetProgramivProc>(GetGLProcAddress("glGetProgramiv"));
  if (!g_glGetProgramInfoLog)
    g_glGetProgramInfoLog = reinterpret_cast<glGetProgramInfoLogProc>(GetGLProcAddress("glGetProgramInfoLog"));
  if (!g_glGetRenderbufferParameterivEXT)
    g_glGetRenderbufferParameterivEXT = reinterpret_cast<glGetRenderbufferParameterivEXTProc>(GetGLProcAddress("glGetRenderbufferParameterivEXT"));
  if (!g_glGetRenderbufferParameterivEXT)
    g_glGetRenderbufferParameterivEXT = reinterpret_cast<glGetRenderbufferParameterivEXTProc>(GetGLProcAddress("glGetRenderbufferParameteriv"));
  if (!g_glGetShaderiv)
    g_glGetShaderiv = reinterpret_cast<glGetShaderivProc>(GetGLProcAddress("glGetShaderiv"));
  if (!g_glGetShaderInfoLog)
    g_glGetShaderInfoLog = reinterpret_cast<glGetShaderInfoLogProc>(GetGLProcAddress("glGetShaderInfoLog"));
  if (!g_glGetShaderPrecisionFormat)
    g_glGetShaderPrecisionFormat = reinterpret_cast<glGetShaderPrecisionFormatProc>(GetGLProcAddress("glGetShaderPrecisionFormat"));
  if (!g_glGetShaderSource)
    g_glGetShaderSource = reinterpret_cast<glGetShaderSourceProc>(GetGLProcAddress("glGetShaderSource"));
  if (!g_glGetString)
    g_glGetString = reinterpret_cast<glGetStringProc>(GetGLProcAddress("glGetString"));
  if (!g_glGetTexLevelParameterfv)
    g_glGetTexLevelParameterfv = reinterpret_cast<glGetTexLevelParameterfvProc>(GetGLProcAddress("glGetTexLevelParameterfv"));
  if (!g_glGetTexLevelParameteriv)
    g_glGetTexLevelParameteriv = reinterpret_cast<glGetTexLevelParameterivProc>(GetGLProcAddress("glGetTexLevelParameteriv"));
  if (!g_glGetTexParameterfv)
    g_glGetTexParameterfv = reinterpret_cast<glGetTexParameterfvProc>(GetGLProcAddress("glGetTexParameterfv"));
  if (!g_glGetTexParameteriv)
    g_glGetTexParameteriv = reinterpret_cast<glGetTexParameterivProc>(GetGLProcAddress("glGetTexParameteriv"));
  if (!g_glGetTranslatedShaderSourceANGLE)
    g_glGetTranslatedShaderSourceANGLE = reinterpret_cast<glGetTranslatedShaderSourceANGLEProc>(GetGLProcAddress("glGetTranslatedShaderSourceANGLE"));
  if (!g_glGetUniformfv)
    g_glGetUniformfv = reinterpret_cast<glGetUniformfvProc>(GetGLProcAddress("glGetUniformfv"));
  if (!g_glGetUniformiv)
    g_glGetUniformiv = reinterpret_cast<glGetUniformivProc>(GetGLProcAddress("glGetUniformiv"));
  if (!g_glGetUniformLocation)
    g_glGetUniformLocation = reinterpret_cast<glGetUniformLocationProc>(GetGLProcAddress("glGetUniformLocation"));
  if (!g_glGetVertexAttribfv)
    g_glGetVertexAttribfv = reinterpret_cast<glGetVertexAttribfvProc>(GetGLProcAddress("glGetVertexAttribfv"));
  if (!g_glGetVertexAttribiv)
    g_glGetVertexAttribiv = reinterpret_cast<glGetVertexAttribivProc>(GetGLProcAddress("glGetVertexAttribiv"));
  if (!g_glGetVertexAttribPointerv)
    g_glGetVertexAttribPointerv = reinterpret_cast<glGetVertexAttribPointervProc>(GetGLProcAddress("glGetVertexAttribPointerv"));
  if (!g_glHint)
    g_glHint = reinterpret_cast<glHintProc>(GetGLProcAddress("glHint"));
  if (!g_glIsBuffer)
    g_glIsBuffer = reinterpret_cast<glIsBufferProc>(GetGLProcAddress("glIsBuffer"));
  if (!g_glIsEnabled)
    g_glIsEnabled = reinterpret_cast<glIsEnabledProc>(GetGLProcAddress("glIsEnabled"));
  if (!g_glIsFramebufferEXT)
    g_glIsFramebufferEXT = reinterpret_cast<glIsFramebufferEXTProc>(GetGLProcAddress("glIsFramebufferEXT"));
  if (!g_glIsFramebufferEXT)
    g_glIsFramebufferEXT = reinterpret_cast<glIsFramebufferEXTProc>(GetGLProcAddress("glIsFramebuffer"));
  if (!g_glIsProgram)
    g_glIsProgram = reinterpret_cast<glIsProgramProc>(GetGLProcAddress("glIsProgram"));
  if (!g_glIsRenderbufferEXT)
    g_glIsRenderbufferEXT = reinterpret_cast<glIsRenderbufferEXTProc>(GetGLProcAddress("glIsRenderbufferEXT"));
  if (!g_glIsRenderbufferEXT)
    g_glIsRenderbufferEXT = reinterpret_cast<glIsRenderbufferEXTProc>(GetGLProcAddress("glIsRenderbuffer"));
  if (!g_glIsShader)
    g_glIsShader = reinterpret_cast<glIsShaderProc>(GetGLProcAddress("glIsShader"));
  if (!g_glIsTexture)
    g_glIsTexture = reinterpret_cast<glIsTextureProc>(GetGLProcAddress("glIsTexture"));
  if (!g_glLineWidth)
    g_glLineWidth = reinterpret_cast<glLineWidthProc>(GetGLProcAddress("glLineWidth"));
  if (!g_glLinkProgram)
    g_glLinkProgram = reinterpret_cast<glLinkProgramProc>(GetGLProcAddress("glLinkProgram"));
  if (!g_glMapBuffer)
    g_glMapBuffer = reinterpret_cast<glMapBufferProc>(GetGLProcAddress("glMapBuffer"));
  if (!g_glPixelStorei)
    g_glPixelStorei = reinterpret_cast<glPixelStoreiProc>(GetGLProcAddress("glPixelStorei"));
  if (!g_glPolygonOffset)
    g_glPolygonOffset = reinterpret_cast<glPolygonOffsetProc>(GetGLProcAddress("glPolygonOffset"));
  if (!g_glReadBuffer)
    g_glReadBuffer = reinterpret_cast<glReadBufferProc>(GetGLProcAddress("glReadBuffer"));
  if (!g_glReadPixels)
    g_glReadPixels = reinterpret_cast<glReadPixelsProc>(GetGLProcAddress("glReadPixels"));
  if (!g_glReleaseShaderCompiler)
    g_glReleaseShaderCompiler = reinterpret_cast<glReleaseShaderCompilerProc>(GetGLProcAddress("glReleaseShaderCompiler"));
  if (!g_glRenderbufferStorageMultisampleEXT)
    g_glRenderbufferStorageMultisampleEXT = reinterpret_cast<glRenderbufferStorageMultisampleEXTProc>(GetGLProcAddress("glRenderbufferStorageMultisampleEXT"));
  if (!g_glRenderbufferStorageMultisampleEXT)
    g_glRenderbufferStorageMultisampleEXT = reinterpret_cast<glRenderbufferStorageMultisampleEXTProc>(GetGLProcAddress("glRenderbufferStorageMultisample"));
  if (!g_glRenderbufferStorageMultisampleANGLE)
    g_glRenderbufferStorageMultisampleANGLE = reinterpret_cast<glRenderbufferStorageMultisampleANGLEProc>(GetGLProcAddress("glRenderbufferStorageMultisampleANGLE"));
  if (!g_glRenderbufferStorageMultisampleANGLE)
    g_glRenderbufferStorageMultisampleANGLE = reinterpret_cast<glRenderbufferStorageMultisampleANGLEProc>(GetGLProcAddress("glRenderbufferStorageMultisample"));
  if (!g_glRenderbufferStorageEXT)
    g_glRenderbufferStorageEXT = reinterpret_cast<glRenderbufferStorageEXTProc>(GetGLProcAddress("glRenderbufferStorageEXT"));
  if (!g_glRenderbufferStorageEXT)
    g_glRenderbufferStorageEXT = reinterpret_cast<glRenderbufferStorageEXTProc>(GetGLProcAddress("glRenderbufferStorage"));
  if (!g_glSampleCoverage)
    g_glSampleCoverage = reinterpret_cast<glSampleCoverageProc>(GetGLProcAddress("glSampleCoverage"));
  if (!g_glScissor)
    g_glScissor = reinterpret_cast<glScissorProc>(GetGLProcAddress("glScissor"));
  if (!g_glShaderBinary)
    g_glShaderBinary = reinterpret_cast<glShaderBinaryProc>(GetGLProcAddress("glShaderBinary"));
  if (!g_glShaderSource)
    g_glShaderSource = reinterpret_cast<glShaderSourceProc>(GetGLProcAddress("glShaderSource"));
  if (!g_glStencilFunc)
    g_glStencilFunc = reinterpret_cast<glStencilFuncProc>(GetGLProcAddress("glStencilFunc"));
  if (!g_glStencilFuncSeparate)
    g_glStencilFuncSeparate = reinterpret_cast<glStencilFuncSeparateProc>(GetGLProcAddress("glStencilFuncSeparate"));
  if (!g_glStencilMask)
    g_glStencilMask = reinterpret_cast<glStencilMaskProc>(GetGLProcAddress("glStencilMask"));
  if (!g_glStencilMaskSeparate)
    g_glStencilMaskSeparate = reinterpret_cast<glStencilMaskSeparateProc>(GetGLProcAddress("glStencilMaskSeparate"));
  if (!g_glStencilOp)
    g_glStencilOp = reinterpret_cast<glStencilOpProc>(GetGLProcAddress("glStencilOp"));
  if (!g_glStencilOpSeparate)
    g_glStencilOpSeparate = reinterpret_cast<glStencilOpSeparateProc>(GetGLProcAddress("glStencilOpSeparate"));
  if (!g_glTexImage2D)
    g_glTexImage2D = reinterpret_cast<glTexImage2DProc>(GetGLProcAddress("glTexImage2D"));
  if (!g_glTexParameterf)
    g_glTexParameterf = reinterpret_cast<glTexParameterfProc>(GetGLProcAddress("glTexParameterf"));
  if (!g_glTexParameterfv)
    g_glTexParameterfv = reinterpret_cast<glTexParameterfvProc>(GetGLProcAddress("glTexParameterfv"));
  if (!g_glTexParameteri)
    g_glTexParameteri = reinterpret_cast<glTexParameteriProc>(GetGLProcAddress("glTexParameteri"));
  if (!g_glTexParameteriv)
    g_glTexParameteriv = reinterpret_cast<glTexParameterivProc>(GetGLProcAddress("glTexParameteriv"));
  if (!g_glTexSubImage2D)
    g_glTexSubImage2D = reinterpret_cast<glTexSubImage2DProc>(GetGLProcAddress("glTexSubImage2D"));
  if (!g_glUniform1f)
    g_glUniform1f = reinterpret_cast<glUniform1fProc>(GetGLProcAddress("glUniform1f"));
  if (!g_glUniform1fv)
    g_glUniform1fv = reinterpret_cast<glUniform1fvProc>(GetGLProcAddress("glUniform1fv"));
  if (!g_glUniform1i)
    g_glUniform1i = reinterpret_cast<glUniform1iProc>(GetGLProcAddress("glUniform1i"));
  if (!g_glUniform1iv)
    g_glUniform1iv = reinterpret_cast<glUniform1ivProc>(GetGLProcAddress("glUniform1iv"));
  if (!g_glUniform2f)
    g_glUniform2f = reinterpret_cast<glUniform2fProc>(GetGLProcAddress("glUniform2f"));
  if (!g_glUniform2fv)
    g_glUniform2fv = reinterpret_cast<glUniform2fvProc>(GetGLProcAddress("glUniform2fv"));
  if (!g_glUniform2i)
    g_glUniform2i = reinterpret_cast<glUniform2iProc>(GetGLProcAddress("glUniform2i"));
  if (!g_glUniform2iv)
    g_glUniform2iv = reinterpret_cast<glUniform2ivProc>(GetGLProcAddress("glUniform2iv"));
  if (!g_glUniform3f)
    g_glUniform3f = reinterpret_cast<glUniform3fProc>(GetGLProcAddress("glUniform3f"));
  if (!g_glUniform3fv)
    g_glUniform3fv = reinterpret_cast<glUniform3fvProc>(GetGLProcAddress("glUniform3fv"));
  if (!g_glUniform3i)
    g_glUniform3i = reinterpret_cast<glUniform3iProc>(GetGLProcAddress("glUniform3i"));
  if (!g_glUniform3iv)
    g_glUniform3iv = reinterpret_cast<glUniform3ivProc>(GetGLProcAddress("glUniform3iv"));
  if (!g_glUniform4f)
    g_glUniform4f = reinterpret_cast<glUniform4fProc>(GetGLProcAddress("glUniform4f"));
  if (!g_glUniform4fv)
    g_glUniform4fv = reinterpret_cast<glUniform4fvProc>(GetGLProcAddress("glUniform4fv"));
  if (!g_glUniform4i)
    g_glUniform4i = reinterpret_cast<glUniform4iProc>(GetGLProcAddress("glUniform4i"));
  if (!g_glUniform4iv)
    g_glUniform4iv = reinterpret_cast<glUniform4ivProc>(GetGLProcAddress("glUniform4iv"));
  if (!g_glUniformMatrix2fv)
    g_glUniformMatrix2fv = reinterpret_cast<glUniformMatrix2fvProc>(GetGLProcAddress("glUniformMatrix2fv"));
  if (!g_glUniformMatrix3fv)
    g_glUniformMatrix3fv = reinterpret_cast<glUniformMatrix3fvProc>(GetGLProcAddress("glUniformMatrix3fv"));
  if (!g_glUniformMatrix4fv)
    g_glUniformMatrix4fv = reinterpret_cast<glUniformMatrix4fvProc>(GetGLProcAddress("glUniformMatrix4fv"));
  if (!g_glUnmapBuffer)
    g_glUnmapBuffer = reinterpret_cast<glUnmapBufferProc>(GetGLProcAddress("glUnmapBuffer"));
  if (!g_glUseProgram)
    g_glUseProgram = reinterpret_cast<glUseProgramProc>(GetGLProcAddress("glUseProgram"));
  if (!g_glValidateProgram)
    g_glValidateProgram = reinterpret_cast<glValidateProgramProc>(GetGLProcAddress("glValidateProgram"));
  if (!g_glVertexAttrib1f)
    g_glVertexAttrib1f = reinterpret_cast<glVertexAttrib1fProc>(GetGLProcAddress("glVertexAttrib1f"));
  if (!g_glVertexAttrib1fv)
    g_glVertexAttrib1fv = reinterpret_cast<glVertexAttrib1fvProc>(GetGLProcAddress("glVertexAttrib1fv"));
  if (!g_glVertexAttrib2f)
    g_glVertexAttrib2f = reinterpret_cast<glVertexAttrib2fProc>(GetGLProcAddress("glVertexAttrib2f"));
  if (!g_glVertexAttrib2fv)
    g_glVertexAttrib2fv = reinterpret_cast<glVertexAttrib2fvProc>(GetGLProcAddress("glVertexAttrib2fv"));
  if (!g_glVertexAttrib3f)
    g_glVertexAttrib3f = reinterpret_cast<glVertexAttrib3fProc>(GetGLProcAddress("glVertexAttrib3f"));
  if (!g_glVertexAttrib3fv)
    g_glVertexAttrib3fv = reinterpret_cast<glVertexAttrib3fvProc>(GetGLProcAddress("glVertexAttrib3fv"));
  if (!g_glVertexAttrib4f)
    g_glVertexAttrib4f = reinterpret_cast<glVertexAttrib4fProc>(GetGLProcAddress("glVertexAttrib4f"));
  if (!g_glVertexAttrib4fv)
    g_glVertexAttrib4fv = reinterpret_cast<glVertexAttrib4fvProc>(GetGLProcAddress("glVertexAttrib4fv"));
  if (!g_glVertexAttribPointer)
    g_glVertexAttribPointer = reinterpret_cast<glVertexAttribPointerProc>(GetGLProcAddress("glVertexAttribPointer"));
  if (!g_glViewport)
    g_glViewport = reinterpret_cast<glViewportProc>(GetGLProcAddress("glViewport"));
  if (!g_glGenFencesNV)
    g_glGenFencesNV = reinterpret_cast<glGenFencesNVProc>(GetGLProcAddress("glGenFencesNV"));
  if (!g_glDeleteFencesNV)
    g_glDeleteFencesNV = reinterpret_cast<glDeleteFencesNVProc>(GetGLProcAddress("glDeleteFencesNV"));
  if (!g_glSetFenceNV)
    g_glSetFenceNV = reinterpret_cast<glSetFenceNVProc>(GetGLProcAddress("glSetFenceNV"));
  if (!g_glTestFenceNV)
    g_glTestFenceNV = reinterpret_cast<glTestFenceNVProc>(GetGLProcAddress("glTestFenceNV"));
  if (!g_glFinishFenceNV)
    g_glFinishFenceNV = reinterpret_cast<glFinishFenceNVProc>(GetGLProcAddress("glFinishFenceNV"));
  if (!g_glIsFenceNV)
    g_glIsFenceNV = reinterpret_cast<glIsFenceNVProc>(GetGLProcAddress("glIsFenceNV"));
  if (!g_glGetFenceivNV)
    g_glGetFenceivNV = reinterpret_cast<glGetFenceivNVProc>(GetGLProcAddress("glGetFenceivNV"));
}

extern "C" {

static void GL_BINDING_CALL Debug_glActiveTexture(GLenum texture) {
  GL_SERVICE_LOG("glActiveTexture" << "("  << texture << ")");
  g_debug_glActiveTexture(texture);
}

static void GL_BINDING_CALL Debug_glAttachShader(GLuint program, GLuint shader) {
  GL_SERVICE_LOG("glAttachShader" << "("  << program << ", " << shader << ")");
  g_debug_glAttachShader(program, shader);
}

static void GL_BINDING_CALL Debug_glBindAttribLocation(GLuint program, GLuint index, const char* name) {
  GL_SERVICE_LOG("glBindAttribLocation" << "("  << program << ", " << index << ", " << static_cast<const void*>(name) << ")");
  g_debug_glBindAttribLocation(program, index, name);
}

static void GL_BINDING_CALL Debug_glBindBuffer(GLenum target, GLuint buffer) {
  GL_SERVICE_LOG("glBindBuffer" << "("  << target << ", " << buffer << ")");
  g_debug_glBindBuffer(target, buffer);
}

static void GL_BINDING_CALL Debug_glBindFragDataLocation(GLuint program, GLuint colorNumber, const char* name) {
  GL_SERVICE_LOG("glBindFragDataLocation" << "("  << program << ", " << colorNumber << ", " << static_cast<const void*>(name) << ")");
  g_debug_glBindFragDataLocation(program, colorNumber, name);
}

static void GL_BINDING_CALL Debug_glBindFragDataLocationIndexedARB(GLuint program, GLuint colorNumber, GLuint index, const char* name) {
  GL_SERVICE_LOG("glBindFragDataLocationIndexedARB" << "("  << program << ", " << colorNumber << ", " << index << ", " << static_cast<const void*>(name) << ")");
  g_debug_glBindFragDataLocationIndexedARB(program, colorNumber, index, name);
}

static void GL_BINDING_CALL Debug_glBindFramebufferEXT(GLenum target, GLuint framebuffer) {
  GL_SERVICE_LOG("glBindFramebufferEXT" << "("  << target << ", " << framebuffer << ")");
  g_debug_glBindFramebufferEXT(target, framebuffer);
}

static void GL_BINDING_CALL Debug_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer) {
  GL_SERVICE_LOG("glBindRenderbufferEXT" << "("  << target << ", " << renderbuffer << ")");
  g_debug_glBindRenderbufferEXT(target, renderbuffer);
}

static void GL_BINDING_CALL Debug_glBindTexture(GLenum target, GLuint texture) {
  GL_SERVICE_LOG("glBindTexture" << "("  << target << ", " << texture << ")");
  g_debug_glBindTexture(target, texture);
}

static void GL_BINDING_CALL Debug_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {
  GL_SERVICE_LOG("glBlendColor" << "("  << red << ", " << green << ", " << blue << ", " << alpha << ")");
  g_debug_glBlendColor(red, green, blue, alpha);
}

static void GL_BINDING_CALL Debug_glBlendEquation( GLenum mode ) {
  GL_SERVICE_LOG("glBlendEquation" << "("  <<  mode  << ")");
  g_debug_glBlendEquation( mode );
}

static void GL_BINDING_CALL Debug_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
  GL_SERVICE_LOG("glBlendEquationSeparate" << "("  << modeRGB << ", " << modeAlpha << ")");
  g_debug_glBlendEquationSeparate(modeRGB, modeAlpha);
}

static void GL_BINDING_CALL Debug_glBlendFunc(GLenum sfactor, GLenum dfactor) {
  GL_SERVICE_LOG("glBlendFunc" << "("  << sfactor << ", " << dfactor << ")");
  g_debug_glBlendFunc(sfactor, dfactor);
}

static void GL_BINDING_CALL Debug_glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  GL_SERVICE_LOG("glBlendFuncSeparate" << "("  << srcRGB << ", " << dstRGB << ", " << srcAlpha << ", " << dstAlpha << ")");
  g_debug_glBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
}

static void GL_BINDING_CALL Debug_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  GL_SERVICE_LOG("glBlitFramebufferEXT" << "("  << srcX0 << ", " << srcY0 << ", " << srcX1 << ", " << srcY1 << ", " << dstX0 << ", " << dstY0 << ", " << dstX1 << ", " << dstY1 << ", " << mask << ", " << filter << ")");
  g_debug_glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

static void GL_BINDING_CALL Debug_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  GL_SERVICE_LOG("glBlitFramebufferANGLE" << "("  << srcX0 << ", " << srcY0 << ", " << srcX1 << ", " << srcY1 << ", " << dstX0 << ", " << dstY0 << ", " << dstX1 << ", " << dstY1 << ", " << mask << ", " << filter << ")");
  g_debug_glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

static void GL_BINDING_CALL Debug_glBufferData(GLenum target, GLsizei size, const void* data, GLenum usage) {
  GL_SERVICE_LOG("glBufferData" << "("  << target << ", " << size << ", " << static_cast<const void*>(data) << ", " << usage << ")");
  g_debug_glBufferData(target, size, data, usage);
}

static void GL_BINDING_CALL Debug_glBufferSubData(GLenum target, GLint offset, GLsizei size, const void* data) {
  GL_SERVICE_LOG("glBufferSubData" << "("  << target << ", " << offset << ", " << size << ", " << static_cast<const void*>(data) << ")");
  g_debug_glBufferSubData(target, offset, size, data);
}

static GLenum GL_BINDING_CALL Debug_glCheckFramebufferStatusEXT(GLenum target) {
  GL_SERVICE_LOG("glCheckFramebufferStatusEXT" << "("  << target << ")");
  GLenum result = g_debug_glCheckFramebufferStatusEXT(target);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glClear(GLbitfield mask) {
  GL_SERVICE_LOG("glClear" << "("  << mask << ")");
  g_debug_glClear(mask);
}

static void GL_BINDING_CALL Debug_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {
  GL_SERVICE_LOG("glClearColor" << "("  << red << ", " << green << ", " << blue << ", " << alpha << ")");
  g_debug_glClearColor(red, green, blue, alpha);
}

static void GL_BINDING_CALL Debug_glClearDepth(GLclampd depth) {
  GL_SERVICE_LOG("glClearDepth" << "("  << depth << ")");
  g_debug_glClearDepth(depth);
}

static void GL_BINDING_CALL Debug_glClearDepthf(GLclampf depth) {
  GL_SERVICE_LOG("glClearDepthf" << "("  << depth << ")");
  g_debug_glClearDepthf(depth);
}

static void GL_BINDING_CALL Debug_glClearStencil(GLint s) {
  GL_SERVICE_LOG("glClearStencil" << "("  << s << ")");
  g_debug_glClearStencil(s);
}

static void GL_BINDING_CALL Debug_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  GL_SERVICE_LOG("glColorMask" << "("  << red << ", " << green << ", " << blue << ", " << alpha << ")");
  g_debug_glColorMask(red, green, blue, alpha);
}

static void GL_BINDING_CALL Debug_glCompileShader(GLuint shader) {
  GL_SERVICE_LOG("glCompileShader" << "("  << shader << ")");
  g_debug_glCompileShader(shader);
}

static void GL_BINDING_CALL Debug_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data) {
  GL_SERVICE_LOG("glCompressedTexImage2D" << "("  << target << ", " << level << ", " << internalformat << ", " << width << ", " << height << ", " << border << ", " << imageSize << ", " << static_cast<const void*>(data) << ")");
  g_debug_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}

static void GL_BINDING_CALL Debug_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data) {
  GL_SERVICE_LOG("glCompressedTexSubImage2D" << "("  << target << ", " << level << ", " << xoffset << ", " << yoffset << ", " << width << ", " << height << ", " << format << ", " << imageSize << ", " << static_cast<const void*>(data) << ")");
  g_debug_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void GL_BINDING_CALL Debug_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  GL_SERVICE_LOG("glCopyTexImage2D" << "("  << target << ", " << level << ", " << internalformat << ", " << x << ", " << y << ", " << width << ", " << height << ", " << border << ")");
  g_debug_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}

static void GL_BINDING_CALL Debug_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glCopyTexSubImage2D" << "("  << target << ", " << level << ", " << xoffset << ", " << yoffset << ", " << x << ", " << y << ", " << width << ", " << height << ")");
  g_debug_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

static GLuint GL_BINDING_CALL Debug_glCreateProgram(void) {
  GL_SERVICE_LOG("glCreateProgram" << "("  << ")");
  GLuint result = g_debug_glCreateProgram();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLuint GL_BINDING_CALL Debug_glCreateShader(GLenum type) {
  GL_SERVICE_LOG("glCreateShader" << "("  << type << ")");
  GLuint result = g_debug_glCreateShader(type);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glCullFace(GLenum mode) {
  GL_SERVICE_LOG("glCullFace" << "("  << mode << ")");
  g_debug_glCullFace(mode);
}

static void GL_BINDING_CALL Debug_glDeleteBuffersARB(GLsizei n, const GLuint* buffers) {
  GL_SERVICE_LOG("glDeleteBuffersARB" << "("  << n << ", " << static_cast<const void*>(buffers) << ")");
  g_debug_glDeleteBuffersARB(n, buffers);
}

static void GL_BINDING_CALL Debug_glDeleteFramebuffersEXT(GLsizei n, const GLuint* framebuffers) {
  GL_SERVICE_LOG("glDeleteFramebuffersEXT" << "("  << n << ", " << static_cast<const void*>(framebuffers) << ")");
  g_debug_glDeleteFramebuffersEXT(n, framebuffers);
}

static void GL_BINDING_CALL Debug_glDeleteProgram(GLuint program) {
  GL_SERVICE_LOG("glDeleteProgram" << "("  << program << ")");
  g_debug_glDeleteProgram(program);
}

static void GL_BINDING_CALL Debug_glDeleteRenderbuffersEXT(GLsizei n, const GLuint* renderbuffers) {
  GL_SERVICE_LOG("glDeleteRenderbuffersEXT" << "("  << n << ", " << static_cast<const void*>(renderbuffers) << ")");
  g_debug_glDeleteRenderbuffersEXT(n, renderbuffers);
}

static void GL_BINDING_CALL Debug_glDeleteShader(GLuint shader) {
  GL_SERVICE_LOG("glDeleteShader" << "("  << shader << ")");
  g_debug_glDeleteShader(shader);
}

static void GL_BINDING_CALL Debug_glDeleteTextures(GLsizei n, const GLuint* textures) {
  GL_SERVICE_LOG("glDeleteTextures" << "("  << n << ", " << static_cast<const void*>(textures) << ")");
  g_debug_glDeleteTextures(n, textures);
}

static void GL_BINDING_CALL Debug_glDepthFunc(GLenum func) {
  GL_SERVICE_LOG("glDepthFunc" << "("  << func << ")");
  g_debug_glDepthFunc(func);
}

static void GL_BINDING_CALL Debug_glDepthMask(GLboolean flag) {
  GL_SERVICE_LOG("glDepthMask" << "("  << flag << ")");
  g_debug_glDepthMask(flag);
}

static void GL_BINDING_CALL Debug_glDepthRange(GLclampd zNear, GLclampd zFar) {
  GL_SERVICE_LOG("glDepthRange" << "("  << zNear << ", " << zFar << ")");
  g_debug_glDepthRange(zNear, zFar);
}

static void GL_BINDING_CALL Debug_glDepthRangef(GLclampf zNear, GLclampf zFar) {
  GL_SERVICE_LOG("glDepthRangef" << "("  << zNear << ", " << zFar << ")");
  g_debug_glDepthRangef(zNear, zFar);
}

static void GL_BINDING_CALL Debug_glDetachShader(GLuint program, GLuint shader) {
  GL_SERVICE_LOG("glDetachShader" << "("  << program << ", " << shader << ")");
  g_debug_glDetachShader(program, shader);
}

static void GL_BINDING_CALL Debug_glDisable(GLenum cap) {
  GL_SERVICE_LOG("glDisable" << "("  << cap << ")");
  g_debug_glDisable(cap);
}

static void GL_BINDING_CALL Debug_glDisableVertexAttribArray(GLuint index) {
  GL_SERVICE_LOG("glDisableVertexAttribArray" << "("  << index << ")");
  g_debug_glDisableVertexAttribArray(index);
}

static void GL_BINDING_CALL Debug_glDrawArrays(GLenum mode, GLint first, GLsizei count) {
  GL_SERVICE_LOG("glDrawArrays" << "("  << mode << ", " << first << ", " << count << ")");
  g_debug_glDrawArrays(mode, first, count);
}

static void GL_BINDING_CALL Debug_glDrawBuffer(GLenum mode) {
  GL_SERVICE_LOG("glDrawBuffer" << "("  << mode << ")");
  g_debug_glDrawBuffer(mode);
}

static void GL_BINDING_CALL Debug_glDrawBuffersARB(GLsizei n, const GLenum* bufs) {
  GL_SERVICE_LOG("glDrawBuffersARB" << "("  << n << ", " << static_cast<const void*>(bufs) << ")");
  g_debug_glDrawBuffersARB(n, bufs);
}

static void GL_BINDING_CALL Debug_glDrawElements(GLenum mode, GLsizei count, GLenum type, const void* indices) {
  GL_SERVICE_LOG("glDrawElements" << "("  << mode << ", " << count << ", " << type << ", " << static_cast<const void*>(indices) << ")");
  g_debug_glDrawElements(mode, count, type, indices);
}

static void GL_BINDING_CALL Debug_glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image) {
  GL_SERVICE_LOG("glEGLImageTargetTexture2DOES" << "("  << target << ", " << image << ")");
  g_debug_glEGLImageTargetTexture2DOES(target, image);
}

static void GL_BINDING_CALL Debug_glEnable(GLenum cap) {
  GL_SERVICE_LOG("glEnable" << "("  << cap << ")");
  g_debug_glEnable(cap);
}

static void GL_BINDING_CALL Debug_glEnableVertexAttribArray(GLuint index) {
  GL_SERVICE_LOG("glEnableVertexAttribArray" << "("  << index << ")");
  g_debug_glEnableVertexAttribArray(index);
}

static void GL_BINDING_CALL Debug_glFinish(void) {
  GL_SERVICE_LOG("glFinish" << "("  << ")");
  g_debug_glFinish();
}

static void GL_BINDING_CALL Debug_glFlush(void) {
  GL_SERVICE_LOG("glFlush" << "("  << ")");
  g_debug_glFlush();
}

static void GL_BINDING_CALL Debug_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  GL_SERVICE_LOG("glFramebufferRenderbufferEXT" << "("  << target << ", " << attachment << ", " << renderbuffertarget << ", " << renderbuffer << ")");
  g_debug_glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
}

static void GL_BINDING_CALL Debug_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  GL_SERVICE_LOG("glFramebufferTexture2DEXT" << "("  << target << ", " << attachment << ", " << textarget << ", " << texture << ", " << level << ")");
  g_debug_glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
}

static void GL_BINDING_CALL Debug_glFrontFace(GLenum mode) {
  GL_SERVICE_LOG("glFrontFace" << "("  << mode << ")");
  g_debug_glFrontFace(mode);
}

static void GL_BINDING_CALL Debug_glGenBuffersARB(GLsizei n, GLuint* buffers) {
  GL_SERVICE_LOG("glGenBuffersARB" << "("  << n << ", " << static_cast<const void*>(buffers) << ")");
  g_debug_glGenBuffersARB(n, buffers);
}

static void GL_BINDING_CALL Debug_glGenerateMipmapEXT(GLenum target) {
  GL_SERVICE_LOG("glGenerateMipmapEXT" << "("  << target << ")");
  g_debug_glGenerateMipmapEXT(target);
}

static void GL_BINDING_CALL Debug_glGenFramebuffersEXT(GLsizei n, GLuint* framebuffers) {
  GL_SERVICE_LOG("glGenFramebuffersEXT" << "("  << n << ", " << static_cast<const void*>(framebuffers) << ")");
  g_debug_glGenFramebuffersEXT(n, framebuffers);
}

static void GL_BINDING_CALL Debug_glGenRenderbuffersEXT(GLsizei n, GLuint* renderbuffers) {
  GL_SERVICE_LOG("glGenRenderbuffersEXT" << "("  << n << ", " << static_cast<const void*>(renderbuffers) << ")");
  g_debug_glGenRenderbuffersEXT(n, renderbuffers);
}

static void GL_BINDING_CALL Debug_glGenTextures(GLsizei n, GLuint* textures) {
  GL_SERVICE_LOG("glGenTextures" << "("  << n << ", " << static_cast<const void*>(textures) << ")");
  g_debug_glGenTextures(n, textures);
}

static void GL_BINDING_CALL Debug_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name) {
  GL_SERVICE_LOG("glGetActiveAttrib" << "("  << program << ", " << index << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(size) << ", " << static_cast<const void*>(type) << ", " << static_cast<const void*>(name) << ")");
  g_debug_glGetActiveAttrib(program, index, bufsize, length, size, type, name);
}

static void GL_BINDING_CALL Debug_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name) {
  GL_SERVICE_LOG("glGetActiveUniform" << "("  << program << ", " << index << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(size) << ", " << static_cast<const void*>(type) << ", " << static_cast<const void*>(name) << ")");
  g_debug_glGetActiveUniform(program, index, bufsize, length, size, type, name);
}

static void GL_BINDING_CALL Debug_glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders) {
  GL_SERVICE_LOG("glGetAttachedShaders" << "("  << program << ", " << maxcount << ", " << static_cast<const void*>(count) << ", " << static_cast<const void*>(shaders) << ")");
  g_debug_glGetAttachedShaders(program, maxcount, count, shaders);
}

static GLint GL_BINDING_CALL Debug_glGetAttribLocation(GLuint program, const char* name) {
  GL_SERVICE_LOG("glGetAttribLocation" << "("  << program << ", " << static_cast<const void*>(name) << ")");
  GLint result = g_debug_glGetAttribLocation(program, name);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glGetBooleanv(GLenum pname, GLboolean* params) {
  GL_SERVICE_LOG("glGetBooleanv" << "("  << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetBooleanv(pname, params);
}

static void GL_BINDING_CALL Debug_glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetBufferParameteriv" << "("  << target << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetBufferParameteriv(target, pname, params);
}

static GLenum GL_BINDING_CALL Debug_glGetError(void) {
  GL_SERVICE_LOG("glGetError" << "("  << ")");
  GLenum result = g_debug_glGetError();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glGetFloatv(GLenum pname, GLfloat* params) {
  GL_SERVICE_LOG("glGetFloatv" << "("  << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetFloatv(pname, params);
}

static void GL_BINDING_CALL Debug_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetFramebufferAttachmentParameterivEXT" << "("  << target << ", " << attachment << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
}

static GLenum GL_BINDING_CALL Debug_glGetGraphicsResetStatusARB(void) {
  GL_SERVICE_LOG("glGetGraphicsResetStatusARB" << "("  << ")");
  GLenum result = g_debug_glGetGraphicsResetStatusARB();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glGetIntegerv(GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetIntegerv" << "("  << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetIntegerv(pname, params);
}

static void GL_BINDING_CALL Debug_glGetProgramiv(GLuint program, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetProgramiv" << "("  << program << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetProgramiv(program, pname, params);
}

static void GL_BINDING_CALL Debug_glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog) {
  GL_SERVICE_LOG("glGetProgramInfoLog" << "("  << program << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(infolog) << ")");
  g_debug_glGetProgramInfoLog(program, bufsize, length, infolog);
}

static void GL_BINDING_CALL Debug_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetRenderbufferParameterivEXT" << "("  << target << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetRenderbufferParameterivEXT(target, pname, params);
}

static void GL_BINDING_CALL Debug_glGetShaderiv(GLuint shader, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetShaderiv" << "("  << shader << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetShaderiv(shader, pname, params);
}

static void GL_BINDING_CALL Debug_glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog) {
  GL_SERVICE_LOG("glGetShaderInfoLog" << "("  << shader << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(infolog) << ")");
  g_debug_glGetShaderInfoLog(shader, bufsize, length, infolog);
}

static void GL_BINDING_CALL Debug_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision) {
  GL_SERVICE_LOG("glGetShaderPrecisionFormat" << "("  << shadertype << ", " << precisiontype << ", " << static_cast<const void*>(range) << ", " << static_cast<const void*>(precision) << ")");
  g_debug_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}

static void GL_BINDING_CALL Debug_glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, char* source) {
  GL_SERVICE_LOG("glGetShaderSource" << "("  << shader << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(source) << ")");
  g_debug_glGetShaderSource(shader, bufsize, length, source);
}

static const GLubyte* GL_BINDING_CALL Debug_glGetString(GLenum name) {
  GL_SERVICE_LOG("glGetString" << "("  << name << ")");
  const GLubyte* result = g_debug_glGetString(name);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat* params) {
  GL_SERVICE_LOG("glGetTexLevelParameterfv" << "("  << target << ", " << level << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetTexLevelParameterfv(target, level, pname, params);
}

static void GL_BINDING_CALL Debug_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetTexLevelParameteriv" << "("  << target << ", " << level << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetTexLevelParameteriv(target, level, pname, params);
}

static void GL_BINDING_CALL Debug_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat* params) {
  GL_SERVICE_LOG("glGetTexParameterfv" << "("  << target << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetTexParameterfv(target, pname, params);
}

static void GL_BINDING_CALL Debug_glGetTexParameteriv(GLenum target, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetTexParameteriv" << "("  << target << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetTexParameteriv(target, pname, params);
}

static void GL_BINDING_CALL Debug_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei* length, char* source) {
  GL_SERVICE_LOG("glGetTranslatedShaderSourceANGLE" << "("  << shader << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(source) << ")");
  g_debug_glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source);
}

static void GL_BINDING_CALL Debug_glGetUniformfv(GLuint program, GLint location, GLfloat* params) {
  GL_SERVICE_LOG("glGetUniformfv" << "("  << program << ", " << location << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetUniformfv(program, location, params);
}

static void GL_BINDING_CALL Debug_glGetUniformiv(GLuint program, GLint location, GLint* params) {
  GL_SERVICE_LOG("glGetUniformiv" << "("  << program << ", " << location << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetUniformiv(program, location, params);
}

static GLint GL_BINDING_CALL Debug_glGetUniformLocation(GLuint program, const char* name) {
  GL_SERVICE_LOG("glGetUniformLocation" << "("  << program << ", " << static_cast<const void*>(name) << ")");
  GLint result = g_debug_glGetUniformLocation(program, name);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params) {
  GL_SERVICE_LOG("glGetVertexAttribfv" << "("  << index << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetVertexAttribfv(index, pname, params);
}

static void GL_BINDING_CALL Debug_glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetVertexAttribiv" << "("  << index << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetVertexAttribiv(index, pname, params);
}

static void GL_BINDING_CALL Debug_glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer) {
  GL_SERVICE_LOG("glGetVertexAttribPointerv" << "("  << index << ", " << pname << ", " << pointer << ")");
  g_debug_glGetVertexAttribPointerv(index, pname, pointer);
}

static void GL_BINDING_CALL Debug_glHint(GLenum target, GLenum mode) {
  GL_SERVICE_LOG("glHint" << "("  << target << ", " << mode << ")");
  g_debug_glHint(target, mode);
}

static GLboolean GL_BINDING_CALL Debug_glIsBuffer(GLuint buffer) {
  GL_SERVICE_LOG("glIsBuffer" << "("  << buffer << ")");
  GLboolean result = g_debug_glIsBuffer(buffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsEnabled(GLenum cap) {
  GL_SERVICE_LOG("glIsEnabled" << "("  << cap << ")");
  GLboolean result = g_debug_glIsEnabled(cap);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsFramebufferEXT(GLuint framebuffer) {
  GL_SERVICE_LOG("glIsFramebufferEXT" << "("  << framebuffer << ")");
  GLboolean result = g_debug_glIsFramebufferEXT(framebuffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsProgram(GLuint program) {
  GL_SERVICE_LOG("glIsProgram" << "("  << program << ")");
  GLboolean result = g_debug_glIsProgram(program);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsRenderbufferEXT(GLuint renderbuffer) {
  GL_SERVICE_LOG("glIsRenderbufferEXT" << "("  << renderbuffer << ")");
  GLboolean result = g_debug_glIsRenderbufferEXT(renderbuffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsShader(GLuint shader) {
  GL_SERVICE_LOG("glIsShader" << "("  << shader << ")");
  GLboolean result = g_debug_glIsShader(shader);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsTexture(GLuint texture) {
  GL_SERVICE_LOG("glIsTexture" << "("  << texture << ")");
  GLboolean result = g_debug_glIsTexture(texture);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glLineWidth(GLfloat width) {
  GL_SERVICE_LOG("glLineWidth" << "("  << width << ")");
  g_debug_glLineWidth(width);
}

static void GL_BINDING_CALL Debug_glLinkProgram(GLuint program) {
  GL_SERVICE_LOG("glLinkProgram" << "("  << program << ")");
  g_debug_glLinkProgram(program);
}

static void* GL_BINDING_CALL Debug_glMapBuffer(GLenum target, GLenum access) {
  GL_SERVICE_LOG("glMapBuffer" << "("  << target << ", " << access << ")");
  void* result = g_debug_glMapBuffer(target, access);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glPixelStorei(GLenum pname, GLint param) {
  GL_SERVICE_LOG("glPixelStorei" << "("  << pname << ", " << param << ")");
  g_debug_glPixelStorei(pname, param);
}

static void GL_BINDING_CALL Debug_glPolygonOffset(GLfloat factor, GLfloat units) {
  GL_SERVICE_LOG("glPolygonOffset" << "("  << factor << ", " << units << ")");
  g_debug_glPolygonOffset(factor, units);
}

static void GL_BINDING_CALL Debug_glReadBuffer(GLenum src) {
  GL_SERVICE_LOG("glReadBuffer" << "("  << src << ")");
  g_debug_glReadBuffer(src);
}

static void GL_BINDING_CALL Debug_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels) {
  GL_SERVICE_LOG("glReadPixels" << "("  << x << ", " << y << ", " << width << ", " << height << ", " << format << ", " << type << ", " << static_cast<const void*>(pixels) << ")");
  g_debug_glReadPixels(x, y, width, height, format, type, pixels);
}

static void GL_BINDING_CALL Debug_glReleaseShaderCompiler(void) {
  GL_SERVICE_LOG("glReleaseShaderCompiler" << "("  << ")");
  g_debug_glReleaseShaderCompiler();
}

static void GL_BINDING_CALL Debug_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glRenderbufferStorageMultisampleEXT" << "("  << target << ", " << samples << ", " << internalformat << ", " << width << ", " << height << ")");
  g_debug_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
}

static void GL_BINDING_CALL Debug_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glRenderbufferStorageMultisampleANGLE" << "("  << target << ", " << samples << ", " << internalformat << ", " << width << ", " << height << ")");
  g_debug_glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);
}

static void GL_BINDING_CALL Debug_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glRenderbufferStorageEXT" << "("  << target << ", " << internalformat << ", " << width << ", " << height << ")");
  g_debug_glRenderbufferStorageEXT(target, internalformat, width, height);
}

static void GL_BINDING_CALL Debug_glSampleCoverage(GLclampf value, GLboolean invert) {
  GL_SERVICE_LOG("glSampleCoverage" << "("  << value << ", " << invert << ")");
  g_debug_glSampleCoverage(value, invert);
}

static void GL_BINDING_CALL Debug_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glScissor" << "("  << x << ", " << y << ", " << width << ", " << height << ")");
  g_debug_glScissor(x, y, width, height);
}

static void GL_BINDING_CALL Debug_glShaderBinary(GLsizei n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length) {
  GL_SERVICE_LOG("glShaderBinary" << "("  << n << ", " << static_cast<const void*>(shaders) << ", " << binaryformat << ", " << static_cast<const void*>(binary) << ", " << length << ")");
  g_debug_glShaderBinary(n, shaders, binaryformat, binary, length);
}

static void GL_BINDING_CALL Debug_glShaderSource(GLuint shader, GLsizei count, const char** str, const GLint* length) {
  GL_SERVICE_LOG("glShaderSource" << "("  << shader << ", " << count << ", " << str << ", " << static_cast<const void*>(length) << ")");
  g_debug_glShaderSource(shader, count, str, length);
}

static void GL_BINDING_CALL Debug_glStencilFunc(GLenum func, GLint ref, GLuint mask) {
  GL_SERVICE_LOG("glStencilFunc" << "("  << func << ", " << ref << ", " << mask << ")");
  g_debug_glStencilFunc(func, ref, mask);
}

static void GL_BINDING_CALL Debug_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
  GL_SERVICE_LOG("glStencilFuncSeparate" << "("  << face << ", " << func << ", " << ref << ", " << mask << ")");
  g_debug_glStencilFuncSeparate(face, func, ref, mask);
}

static void GL_BINDING_CALL Debug_glStencilMask(GLuint mask) {
  GL_SERVICE_LOG("glStencilMask" << "("  << mask << ")");
  g_debug_glStencilMask(mask);
}

static void GL_BINDING_CALL Debug_glStencilMaskSeparate(GLenum face, GLuint mask) {
  GL_SERVICE_LOG("glStencilMaskSeparate" << "("  << face << ", " << mask << ")");
  g_debug_glStencilMaskSeparate(face, mask);
}

static void GL_BINDING_CALL Debug_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
  GL_SERVICE_LOG("glStencilOp" << "("  << fail << ", " << zfail << ", " << zpass << ")");
  g_debug_glStencilOp(fail, zfail, zpass);
}

static void GL_BINDING_CALL Debug_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass) {
  GL_SERVICE_LOG("glStencilOpSeparate" << "("  << face << ", " << fail << ", " << zfail << ", " << zpass << ")");
  g_debug_glStencilOpSeparate(face, fail, zfail, zpass);
}

static void GL_BINDING_CALL Debug_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels) {
  GL_SERVICE_LOG("glTexImage2D" << "("  << target << ", " << level << ", " << internalformat << ", " << width << ", " << height << ", " << border << ", " << format << ", " << type << ", " << static_cast<const void*>(pixels) << ")");
  g_debug_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}

static void GL_BINDING_CALL Debug_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
  GL_SERVICE_LOG("glTexParameterf" << "("  << target << ", " << pname << ", " << param << ")");
  g_debug_glTexParameterf(target, pname, param);
}

static void GL_BINDING_CALL Debug_glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params) {
  GL_SERVICE_LOG("glTexParameterfv" << "("  << target << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glTexParameterfv(target, pname, params);
}

static void GL_BINDING_CALL Debug_glTexParameteri(GLenum target, GLenum pname, GLint param) {
  GL_SERVICE_LOG("glTexParameteri" << "("  << target << ", " << pname << ", " << param << ")");
  g_debug_glTexParameteri(target, pname, param);
}

static void GL_BINDING_CALL Debug_glTexParameteriv(GLenum target, GLenum pname, const GLint* params) {
  GL_SERVICE_LOG("glTexParameteriv" << "("  << target << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glTexParameteriv(target, pname, params);
}

static void GL_BINDING_CALL Debug_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels) {
  GL_SERVICE_LOG("glTexSubImage2D" << "("  << target << ", " << level << ", " << xoffset << ", " << yoffset << ", " << width << ", " << height << ", " << format << ", " << type << ", " << static_cast<const void*>(pixels) << ")");
  g_debug_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void GL_BINDING_CALL Debug_glUniform1f(GLint location, GLfloat x) {
  GL_SERVICE_LOG("glUniform1f" << "("  << location << ", " << x << ")");
  g_debug_glUniform1f(location, x);
}

static void GL_BINDING_CALL Debug_glUniform1fv(GLint location, GLsizei count, const GLfloat* v) {
  GL_SERVICE_LOG("glUniform1fv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_debug_glUniform1fv(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform1i(GLint location, GLint x) {
  GL_SERVICE_LOG("glUniform1i" << "("  << location << ", " << x << ")");
  g_debug_glUniform1i(location, x);
}

static void GL_BINDING_CALL Debug_glUniform1iv(GLint location, GLsizei count, const GLint* v) {
  GL_SERVICE_LOG("glUniform1iv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_debug_glUniform1iv(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform2f(GLint location, GLfloat x, GLfloat y) {
  GL_SERVICE_LOG("glUniform2f" << "("  << location << ", " << x << ", " << y << ")");
  g_debug_glUniform2f(location, x, y);
}

static void GL_BINDING_CALL Debug_glUniform2fv(GLint location, GLsizei count, const GLfloat* v) {
  GL_SERVICE_LOG("glUniform2fv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_debug_glUniform2fv(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform2i(GLint location, GLint x, GLint y) {
  GL_SERVICE_LOG("glUniform2i" << "("  << location << ", " << x << ", " << y << ")");
  g_debug_glUniform2i(location, x, y);
}

static void GL_BINDING_CALL Debug_glUniform2iv(GLint location, GLsizei count, const GLint* v) {
  GL_SERVICE_LOG("glUniform2iv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_debug_glUniform2iv(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z) {
  GL_SERVICE_LOG("glUniform3f" << "("  << location << ", " << x << ", " << y << ", " << z << ")");
  g_debug_glUniform3f(location, x, y, z);
}

static void GL_BINDING_CALL Debug_glUniform3fv(GLint location, GLsizei count, const GLfloat* v) {
  GL_SERVICE_LOG("glUniform3fv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_debug_glUniform3fv(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform3i(GLint location, GLint x, GLint y, GLint z) {
  GL_SERVICE_LOG("glUniform3i" << "("  << location << ", " << x << ", " << y << ", " << z << ")");
  g_debug_glUniform3i(location, x, y, z);
}

static void GL_BINDING_CALL Debug_glUniform3iv(GLint location, GLsizei count, const GLint* v) {
  GL_SERVICE_LOG("glUniform3iv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_debug_glUniform3iv(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  GL_SERVICE_LOG("glUniform4f" << "("  << location << ", " << x << ", " << y << ", " << z << ", " << w << ")");
  g_debug_glUniform4f(location, x, y, z, w);
}

static void GL_BINDING_CALL Debug_glUniform4fv(GLint location, GLsizei count, const GLfloat* v) {
  GL_SERVICE_LOG("glUniform4fv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_debug_glUniform4fv(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w) {
  GL_SERVICE_LOG("glUniform4i" << "("  << location << ", " << x << ", " << y << ", " << z << ", " << w << ")");
  g_debug_glUniform4i(location, x, y, z, w);
}

static void GL_BINDING_CALL Debug_glUniform4iv(GLint location, GLsizei count, const GLint* v) {
  GL_SERVICE_LOG("glUniform4iv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_debug_glUniform4iv(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
  GL_SERVICE_LOG("glUniformMatrix2fv" << "("  << location << ", " << count << ", " << transpose << ", " << static_cast<const void*>(value) << ")");
  g_debug_glUniformMatrix2fv(location, count, transpose, value);
}

static void GL_BINDING_CALL Debug_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
  GL_SERVICE_LOG("glUniformMatrix3fv" << "("  << location << ", " << count << ", " << transpose << ", " << static_cast<const void*>(value) << ")");
  g_debug_glUniformMatrix3fv(location, count, transpose, value);
}

static void GL_BINDING_CALL Debug_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
  GL_SERVICE_LOG("glUniformMatrix4fv" << "("  << location << ", " << count << ", " << transpose << ", " << static_cast<const void*>(value) << ")");
  g_debug_glUniformMatrix4fv(location, count, transpose, value);
}

static GLboolean GL_BINDING_CALL Debug_glUnmapBuffer(GLenum target) {
  GL_SERVICE_LOG("glUnmapBuffer" << "("  << target << ")");
  GLboolean result = g_debug_glUnmapBuffer(target);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glUseProgram(GLuint program) {
  GL_SERVICE_LOG("glUseProgram" << "("  << program << ")");
  g_debug_glUseProgram(program);
}

static void GL_BINDING_CALL Debug_glValidateProgram(GLuint program) {
  GL_SERVICE_LOG("glValidateProgram" << "("  << program << ")");
  g_debug_glValidateProgram(program);
}

static void GL_BINDING_CALL Debug_glVertexAttrib1f(GLuint indx, GLfloat x) {
  GL_SERVICE_LOG("glVertexAttrib1f" << "("  << indx << ", " << x << ")");
  g_debug_glVertexAttrib1f(indx, x);
}

static void GL_BINDING_CALL Debug_glVertexAttrib1fv(GLuint indx, const GLfloat* values) {
  GL_SERVICE_LOG("glVertexAttrib1fv" << "("  << indx << ", " << static_cast<const void*>(values) << ")");
  g_debug_glVertexAttrib1fv(indx, values);
}

static void GL_BINDING_CALL Debug_glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y) {
  GL_SERVICE_LOG("glVertexAttrib2f" << "("  << indx << ", " << x << ", " << y << ")");
  g_debug_glVertexAttrib2f(indx, x, y);
}

static void GL_BINDING_CALL Debug_glVertexAttrib2fv(GLuint indx, const GLfloat* values) {
  GL_SERVICE_LOG("glVertexAttrib2fv" << "("  << indx << ", " << static_cast<const void*>(values) << ")");
  g_debug_glVertexAttrib2fv(indx, values);
}

static void GL_BINDING_CALL Debug_glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z) {
  GL_SERVICE_LOG("glVertexAttrib3f" << "("  << indx << ", " << x << ", " << y << ", " << z << ")");
  g_debug_glVertexAttrib3f(indx, x, y, z);
}

static void GL_BINDING_CALL Debug_glVertexAttrib3fv(GLuint indx, const GLfloat* values) {
  GL_SERVICE_LOG("glVertexAttrib3fv" << "("  << indx << ", " << static_cast<const void*>(values) << ")");
  g_debug_glVertexAttrib3fv(indx, values);
}

static void GL_BINDING_CALL Debug_glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  GL_SERVICE_LOG("glVertexAttrib4f" << "("  << indx << ", " << x << ", " << y << ", " << z << ", " << w << ")");
  g_debug_glVertexAttrib4f(indx, x, y, z, w);
}

static void GL_BINDING_CALL Debug_glVertexAttrib4fv(GLuint indx, const GLfloat* values) {
  GL_SERVICE_LOG("glVertexAttrib4fv" << "("  << indx << ", " << static_cast<const void*>(values) << ")");
  g_debug_glVertexAttrib4fv(indx, values);
}

static void GL_BINDING_CALL Debug_glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr) {
  GL_SERVICE_LOG("glVertexAttribPointer" << "("  << indx << ", " << size << ", " << type << ", " << normalized << ", " << stride << ", " << static_cast<const void*>(ptr) << ")");
  g_debug_glVertexAttribPointer(indx, size, type, normalized, stride, ptr);
}

static void GL_BINDING_CALL Debug_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glViewport" << "("  << x << ", " << y << ", " << width << ", " << height << ")");
  g_debug_glViewport(x, y, width, height);
}

static void GL_BINDING_CALL Debug_glGenFencesNV(GLsizei n, GLuint* fences) {
  GL_SERVICE_LOG("glGenFencesNV" << "("  << n << ", " << static_cast<const void*>(fences) << ")");
  g_debug_glGenFencesNV(n, fences);
}

static void GL_BINDING_CALL Debug_glDeleteFencesNV(GLsizei n, const GLuint* fences) {
  GL_SERVICE_LOG("glDeleteFencesNV" << "("  << n << ", " << static_cast<const void*>(fences) << ")");
  g_debug_glDeleteFencesNV(n, fences);
}

static void GL_BINDING_CALL Debug_glSetFenceNV(GLuint fence, GLenum condition) {
  GL_SERVICE_LOG("glSetFenceNV" << "("  << fence << ", " << condition << ")");
  g_debug_glSetFenceNV(fence, condition);
}

static GLboolean GL_BINDING_CALL Debug_glTestFenceNV(GLuint fence) {
  GL_SERVICE_LOG("glTestFenceNV" << "("  << fence << ")");
  GLboolean result = g_debug_glTestFenceNV(fence);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glFinishFenceNV(GLuint fence) {
  GL_SERVICE_LOG("glFinishFenceNV" << "("  << fence << ")");
  g_debug_glFinishFenceNV(fence);
}

static GLboolean GL_BINDING_CALL Debug_glIsFenceNV(GLuint fence) {
  GL_SERVICE_LOG("glIsFenceNV" << "("  << fence << ")");
  GLboolean result = g_debug_glIsFenceNV(fence);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glGetFenceivNV(GLuint fence, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetFenceivNV" << "("  << fence << ", " << pname << ", " << static_cast<const void*>(params) << ")");
  g_debug_glGetFenceivNV(fence, pname, params);
}
}  // extern "C"

void InitializeDebugGLBindingsGL() {
  if (!g_debug_glActiveTexture) {
    g_debug_glActiveTexture = g_glActiveTexture;
    g_glActiveTexture = Debug_glActiveTexture;
  }
  if (!g_debug_glAttachShader) {
    g_debug_glAttachShader = g_glAttachShader;
    g_glAttachShader = Debug_glAttachShader;
  }
  if (!g_debug_glBindAttribLocation) {
    g_debug_glBindAttribLocation = g_glBindAttribLocation;
    g_glBindAttribLocation = Debug_glBindAttribLocation;
  }
  if (!g_debug_glBindBuffer) {
    g_debug_glBindBuffer = g_glBindBuffer;
    g_glBindBuffer = Debug_glBindBuffer;
  }
  if (!g_debug_glBindFragDataLocation) {
    g_debug_glBindFragDataLocation = g_glBindFragDataLocation;
    g_glBindFragDataLocation = Debug_glBindFragDataLocation;
  }
  if (!g_debug_glBindFragDataLocationIndexedARB) {
    g_debug_glBindFragDataLocationIndexedARB = g_glBindFragDataLocationIndexedARB;
    g_glBindFragDataLocationIndexedARB = Debug_glBindFragDataLocationIndexedARB;
  }
  if (!g_debug_glBindFramebufferEXT) {
    g_debug_glBindFramebufferEXT = g_glBindFramebufferEXT;
    g_glBindFramebufferEXT = Debug_glBindFramebufferEXT;
  }
  if (!g_debug_glBindFramebufferEXT) {
    g_debug_glBindFramebufferEXT = g_glBindFramebufferEXT;
    g_glBindFramebufferEXT = Debug_glBindFramebufferEXT;
  }
  if (!g_debug_glBindRenderbufferEXT) {
    g_debug_glBindRenderbufferEXT = g_glBindRenderbufferEXT;
    g_glBindRenderbufferEXT = Debug_glBindRenderbufferEXT;
  }
  if (!g_debug_glBindRenderbufferEXT) {
    g_debug_glBindRenderbufferEXT = g_glBindRenderbufferEXT;
    g_glBindRenderbufferEXT = Debug_glBindRenderbufferEXT;
  }
  if (!g_debug_glBindTexture) {
    g_debug_glBindTexture = g_glBindTexture;
    g_glBindTexture = Debug_glBindTexture;
  }
  if (!g_debug_glBlendColor) {
    g_debug_glBlendColor = g_glBlendColor;
    g_glBlendColor = Debug_glBlendColor;
  }
  if (!g_debug_glBlendEquation) {
    g_debug_glBlendEquation = g_glBlendEquation;
    g_glBlendEquation = Debug_glBlendEquation;
  }
  if (!g_debug_glBlendEquationSeparate) {
    g_debug_glBlendEquationSeparate = g_glBlendEquationSeparate;
    g_glBlendEquationSeparate = Debug_glBlendEquationSeparate;
  }
  if (!g_debug_glBlendFunc) {
    g_debug_glBlendFunc = g_glBlendFunc;
    g_glBlendFunc = Debug_glBlendFunc;
  }
  if (!g_debug_glBlendFuncSeparate) {
    g_debug_glBlendFuncSeparate = g_glBlendFuncSeparate;
    g_glBlendFuncSeparate = Debug_glBlendFuncSeparate;
  }
  if (!g_debug_glBlitFramebufferEXT) {
    g_debug_glBlitFramebufferEXT = g_glBlitFramebufferEXT;
    g_glBlitFramebufferEXT = Debug_glBlitFramebufferEXT;
  }
  if (!g_debug_glBlitFramebufferEXT) {
    g_debug_glBlitFramebufferEXT = g_glBlitFramebufferEXT;
    g_glBlitFramebufferEXT = Debug_glBlitFramebufferEXT;
  }
  if (!g_debug_glBlitFramebufferANGLE) {
    g_debug_glBlitFramebufferANGLE = g_glBlitFramebufferANGLE;
    g_glBlitFramebufferANGLE = Debug_glBlitFramebufferANGLE;
  }
  if (!g_debug_glBlitFramebufferANGLE) {
    g_debug_glBlitFramebufferANGLE = g_glBlitFramebufferANGLE;
    g_glBlitFramebufferANGLE = Debug_glBlitFramebufferANGLE;
  }
  if (!g_debug_glBufferData) {
    g_debug_glBufferData = g_glBufferData;
    g_glBufferData = Debug_glBufferData;
  }
  if (!g_debug_glBufferSubData) {
    g_debug_glBufferSubData = g_glBufferSubData;
    g_glBufferSubData = Debug_glBufferSubData;
  }
  if (!g_debug_glCheckFramebufferStatusEXT) {
    g_debug_glCheckFramebufferStatusEXT = g_glCheckFramebufferStatusEXT;
    g_glCheckFramebufferStatusEXT = Debug_glCheckFramebufferStatusEXT;
  }
  if (!g_debug_glCheckFramebufferStatusEXT) {
    g_debug_glCheckFramebufferStatusEXT = g_glCheckFramebufferStatusEXT;
    g_glCheckFramebufferStatusEXT = Debug_glCheckFramebufferStatusEXT;
  }
  if (!g_debug_glClear) {
    g_debug_glClear = g_glClear;
    g_glClear = Debug_glClear;
  }
  if (!g_debug_glClearColor) {
    g_debug_glClearColor = g_glClearColor;
    g_glClearColor = Debug_glClearColor;
  }
  if (!g_debug_glClearDepth) {
    g_debug_glClearDepth = g_glClearDepth;
    g_glClearDepth = Debug_glClearDepth;
  }
  if (!g_debug_glClearDepthf) {
    g_debug_glClearDepthf = g_glClearDepthf;
    g_glClearDepthf = Debug_glClearDepthf;
  }
  if (!g_debug_glClearStencil) {
    g_debug_glClearStencil = g_glClearStencil;
    g_glClearStencil = Debug_glClearStencil;
  }
  if (!g_debug_glColorMask) {
    g_debug_glColorMask = g_glColorMask;
    g_glColorMask = Debug_glColorMask;
  }
  if (!g_debug_glCompileShader) {
    g_debug_glCompileShader = g_glCompileShader;
    g_glCompileShader = Debug_glCompileShader;
  }
  if (!g_debug_glCompressedTexImage2D) {
    g_debug_glCompressedTexImage2D = g_glCompressedTexImage2D;
    g_glCompressedTexImage2D = Debug_glCompressedTexImage2D;
  }
  if (!g_debug_glCompressedTexSubImage2D) {
    g_debug_glCompressedTexSubImage2D = g_glCompressedTexSubImage2D;
    g_glCompressedTexSubImage2D = Debug_glCompressedTexSubImage2D;
  }
  if (!g_debug_glCopyTexImage2D) {
    g_debug_glCopyTexImage2D = g_glCopyTexImage2D;
    g_glCopyTexImage2D = Debug_glCopyTexImage2D;
  }
  if (!g_debug_glCopyTexSubImage2D) {
    g_debug_glCopyTexSubImage2D = g_glCopyTexSubImage2D;
    g_glCopyTexSubImage2D = Debug_glCopyTexSubImage2D;
  }
  if (!g_debug_glCreateProgram) {
    g_debug_glCreateProgram = g_glCreateProgram;
    g_glCreateProgram = Debug_glCreateProgram;
  }
  if (!g_debug_glCreateShader) {
    g_debug_glCreateShader = g_glCreateShader;
    g_glCreateShader = Debug_glCreateShader;
  }
  if (!g_debug_glCullFace) {
    g_debug_glCullFace = g_glCullFace;
    g_glCullFace = Debug_glCullFace;
  }
  if (!g_debug_glDeleteBuffersARB) {
    g_debug_glDeleteBuffersARB = g_glDeleteBuffersARB;
    g_glDeleteBuffersARB = Debug_glDeleteBuffersARB;
  }
  if (!g_debug_glDeleteBuffersARB) {
    g_debug_glDeleteBuffersARB = g_glDeleteBuffersARB;
    g_glDeleteBuffersARB = Debug_glDeleteBuffersARB;
  }
  if (!g_debug_glDeleteFramebuffersEXT) {
    g_debug_glDeleteFramebuffersEXT = g_glDeleteFramebuffersEXT;
    g_glDeleteFramebuffersEXT = Debug_glDeleteFramebuffersEXT;
  }
  if (!g_debug_glDeleteFramebuffersEXT) {
    g_debug_glDeleteFramebuffersEXT = g_glDeleteFramebuffersEXT;
    g_glDeleteFramebuffersEXT = Debug_glDeleteFramebuffersEXT;
  }
  if (!g_debug_glDeleteProgram) {
    g_debug_glDeleteProgram = g_glDeleteProgram;
    g_glDeleteProgram = Debug_glDeleteProgram;
  }
  if (!g_debug_glDeleteRenderbuffersEXT) {
    g_debug_glDeleteRenderbuffersEXT = g_glDeleteRenderbuffersEXT;
    g_glDeleteRenderbuffersEXT = Debug_glDeleteRenderbuffersEXT;
  }
  if (!g_debug_glDeleteRenderbuffersEXT) {
    g_debug_glDeleteRenderbuffersEXT = g_glDeleteRenderbuffersEXT;
    g_glDeleteRenderbuffersEXT = Debug_glDeleteRenderbuffersEXT;
  }
  if (!g_debug_glDeleteShader) {
    g_debug_glDeleteShader = g_glDeleteShader;
    g_glDeleteShader = Debug_glDeleteShader;
  }
  if (!g_debug_glDeleteTextures) {
    g_debug_glDeleteTextures = g_glDeleteTextures;
    g_glDeleteTextures = Debug_glDeleteTextures;
  }
  if (!g_debug_glDepthFunc) {
    g_debug_glDepthFunc = g_glDepthFunc;
    g_glDepthFunc = Debug_glDepthFunc;
  }
  if (!g_debug_glDepthMask) {
    g_debug_glDepthMask = g_glDepthMask;
    g_glDepthMask = Debug_glDepthMask;
  }
  if (!g_debug_glDepthRange) {
    g_debug_glDepthRange = g_glDepthRange;
    g_glDepthRange = Debug_glDepthRange;
  }
  if (!g_debug_glDepthRangef) {
    g_debug_glDepthRangef = g_glDepthRangef;
    g_glDepthRangef = Debug_glDepthRangef;
  }
  if (!g_debug_glDetachShader) {
    g_debug_glDetachShader = g_glDetachShader;
    g_glDetachShader = Debug_glDetachShader;
  }
  if (!g_debug_glDisable) {
    g_debug_glDisable = g_glDisable;
    g_glDisable = Debug_glDisable;
  }
  if (!g_debug_glDisableVertexAttribArray) {
    g_debug_glDisableVertexAttribArray = g_glDisableVertexAttribArray;
    g_glDisableVertexAttribArray = Debug_glDisableVertexAttribArray;
  }
  if (!g_debug_glDrawArrays) {
    g_debug_glDrawArrays = g_glDrawArrays;
    g_glDrawArrays = Debug_glDrawArrays;
  }
  if (!g_debug_glDrawBuffer) {
    g_debug_glDrawBuffer = g_glDrawBuffer;
    g_glDrawBuffer = Debug_glDrawBuffer;
  }
  if (!g_debug_glDrawBuffersARB) {
    g_debug_glDrawBuffersARB = g_glDrawBuffersARB;
    g_glDrawBuffersARB = Debug_glDrawBuffersARB;
  }
  if (!g_debug_glDrawElements) {
    g_debug_glDrawElements = g_glDrawElements;
    g_glDrawElements = Debug_glDrawElements;
  }
  if (!g_debug_glEGLImageTargetTexture2DOES) {
    g_debug_glEGLImageTargetTexture2DOES = g_glEGLImageTargetTexture2DOES;
    g_glEGLImageTargetTexture2DOES = Debug_glEGLImageTargetTexture2DOES;
  }
  if (!g_debug_glEnable) {
    g_debug_glEnable = g_glEnable;
    g_glEnable = Debug_glEnable;
  }
  if (!g_debug_glEnableVertexAttribArray) {
    g_debug_glEnableVertexAttribArray = g_glEnableVertexAttribArray;
    g_glEnableVertexAttribArray = Debug_glEnableVertexAttribArray;
  }
  if (!g_debug_glFinish) {
    g_debug_glFinish = g_glFinish;
    g_glFinish = Debug_glFinish;
  }
  if (!g_debug_glFlush) {
    g_debug_glFlush = g_glFlush;
    g_glFlush = Debug_glFlush;
  }
  if (!g_debug_glFramebufferRenderbufferEXT) {
    g_debug_glFramebufferRenderbufferEXT = g_glFramebufferRenderbufferEXT;
    g_glFramebufferRenderbufferEXT = Debug_glFramebufferRenderbufferEXT;
  }
  if (!g_debug_glFramebufferRenderbufferEXT) {
    g_debug_glFramebufferRenderbufferEXT = g_glFramebufferRenderbufferEXT;
    g_glFramebufferRenderbufferEXT = Debug_glFramebufferRenderbufferEXT;
  }
  if (!g_debug_glFramebufferTexture2DEXT) {
    g_debug_glFramebufferTexture2DEXT = g_glFramebufferTexture2DEXT;
    g_glFramebufferTexture2DEXT = Debug_glFramebufferTexture2DEXT;
  }
  if (!g_debug_glFramebufferTexture2DEXT) {
    g_debug_glFramebufferTexture2DEXT = g_glFramebufferTexture2DEXT;
    g_glFramebufferTexture2DEXT = Debug_glFramebufferTexture2DEXT;
  }
  if (!g_debug_glFrontFace) {
    g_debug_glFrontFace = g_glFrontFace;
    g_glFrontFace = Debug_glFrontFace;
  }
  if (!g_debug_glGenBuffersARB) {
    g_debug_glGenBuffersARB = g_glGenBuffersARB;
    g_glGenBuffersARB = Debug_glGenBuffersARB;
  }
  if (!g_debug_glGenBuffersARB) {
    g_debug_glGenBuffersARB = g_glGenBuffersARB;
    g_glGenBuffersARB = Debug_glGenBuffersARB;
  }
  if (!g_debug_glGenerateMipmapEXT) {
    g_debug_glGenerateMipmapEXT = g_glGenerateMipmapEXT;
    g_glGenerateMipmapEXT = Debug_glGenerateMipmapEXT;
  }
  if (!g_debug_glGenerateMipmapEXT) {
    g_debug_glGenerateMipmapEXT = g_glGenerateMipmapEXT;
    g_glGenerateMipmapEXT = Debug_glGenerateMipmapEXT;
  }
  if (!g_debug_glGenFramebuffersEXT) {
    g_debug_glGenFramebuffersEXT = g_glGenFramebuffersEXT;
    g_glGenFramebuffersEXT = Debug_glGenFramebuffersEXT;
  }
  if (!g_debug_glGenFramebuffersEXT) {
    g_debug_glGenFramebuffersEXT = g_glGenFramebuffersEXT;
    g_glGenFramebuffersEXT = Debug_glGenFramebuffersEXT;
  }
  if (!g_debug_glGenRenderbuffersEXT) {
    g_debug_glGenRenderbuffersEXT = g_glGenRenderbuffersEXT;
    g_glGenRenderbuffersEXT = Debug_glGenRenderbuffersEXT;
  }
  if (!g_debug_glGenRenderbuffersEXT) {
    g_debug_glGenRenderbuffersEXT = g_glGenRenderbuffersEXT;
    g_glGenRenderbuffersEXT = Debug_glGenRenderbuffersEXT;
  }
  if (!g_debug_glGenTextures) {
    g_debug_glGenTextures = g_glGenTextures;
    g_glGenTextures = Debug_glGenTextures;
  }
  if (!g_debug_glGetActiveAttrib) {
    g_debug_glGetActiveAttrib = g_glGetActiveAttrib;
    g_glGetActiveAttrib = Debug_glGetActiveAttrib;
  }
  if (!g_debug_glGetActiveUniform) {
    g_debug_glGetActiveUniform = g_glGetActiveUniform;
    g_glGetActiveUniform = Debug_glGetActiveUniform;
  }
  if (!g_debug_glGetAttachedShaders) {
    g_debug_glGetAttachedShaders = g_glGetAttachedShaders;
    g_glGetAttachedShaders = Debug_glGetAttachedShaders;
  }
  if (!g_debug_glGetAttribLocation) {
    g_debug_glGetAttribLocation = g_glGetAttribLocation;
    g_glGetAttribLocation = Debug_glGetAttribLocation;
  }
  if (!g_debug_glGetBooleanv) {
    g_debug_glGetBooleanv = g_glGetBooleanv;
    g_glGetBooleanv = Debug_glGetBooleanv;
  }
  if (!g_debug_glGetBufferParameteriv) {
    g_debug_glGetBufferParameteriv = g_glGetBufferParameteriv;
    g_glGetBufferParameteriv = Debug_glGetBufferParameteriv;
  }
  if (!g_debug_glGetError) {
    g_debug_glGetError = g_glGetError;
    g_glGetError = Debug_glGetError;
  }
  if (!g_debug_glGetFloatv) {
    g_debug_glGetFloatv = g_glGetFloatv;
    g_glGetFloatv = Debug_glGetFloatv;
  }
  if (!g_debug_glGetFramebufferAttachmentParameterivEXT) {
    g_debug_glGetFramebufferAttachmentParameterivEXT = g_glGetFramebufferAttachmentParameterivEXT;
    g_glGetFramebufferAttachmentParameterivEXT = Debug_glGetFramebufferAttachmentParameterivEXT;
  }
  if (!g_debug_glGetFramebufferAttachmentParameterivEXT) {
    g_debug_glGetFramebufferAttachmentParameterivEXT = g_glGetFramebufferAttachmentParameterivEXT;
    g_glGetFramebufferAttachmentParameterivEXT = Debug_glGetFramebufferAttachmentParameterivEXT;
  }
  if (!g_debug_glGetGraphicsResetStatusARB) {
    g_debug_glGetGraphicsResetStatusARB = g_glGetGraphicsResetStatusARB;
    g_glGetGraphicsResetStatusARB = Debug_glGetGraphicsResetStatusARB;
  }
  if (!g_debug_glGetIntegerv) {
    g_debug_glGetIntegerv = g_glGetIntegerv;
    g_glGetIntegerv = Debug_glGetIntegerv;
  }
  if (!g_debug_glGetProgramiv) {
    g_debug_glGetProgramiv = g_glGetProgramiv;
    g_glGetProgramiv = Debug_glGetProgramiv;
  }
  if (!g_debug_glGetProgramInfoLog) {
    g_debug_glGetProgramInfoLog = g_glGetProgramInfoLog;
    g_glGetProgramInfoLog = Debug_glGetProgramInfoLog;
  }
  if (!g_debug_glGetRenderbufferParameterivEXT) {
    g_debug_glGetRenderbufferParameterivEXT = g_glGetRenderbufferParameterivEXT;
    g_glGetRenderbufferParameterivEXT = Debug_glGetRenderbufferParameterivEXT;
  }
  if (!g_debug_glGetRenderbufferParameterivEXT) {
    g_debug_glGetRenderbufferParameterivEXT = g_glGetRenderbufferParameterivEXT;
    g_glGetRenderbufferParameterivEXT = Debug_glGetRenderbufferParameterivEXT;
  }
  if (!g_debug_glGetShaderiv) {
    g_debug_glGetShaderiv = g_glGetShaderiv;
    g_glGetShaderiv = Debug_glGetShaderiv;
  }
  if (!g_debug_glGetShaderInfoLog) {
    g_debug_glGetShaderInfoLog = g_glGetShaderInfoLog;
    g_glGetShaderInfoLog = Debug_glGetShaderInfoLog;
  }
  if (!g_debug_glGetShaderPrecisionFormat) {
    g_debug_glGetShaderPrecisionFormat = g_glGetShaderPrecisionFormat;
    g_glGetShaderPrecisionFormat = Debug_glGetShaderPrecisionFormat;
  }
  if (!g_debug_glGetShaderSource) {
    g_debug_glGetShaderSource = g_glGetShaderSource;
    g_glGetShaderSource = Debug_glGetShaderSource;
  }
  if (!g_debug_glGetString) {
    g_debug_glGetString = g_glGetString;
    g_glGetString = Debug_glGetString;
  }
  if (!g_debug_glGetTexLevelParameterfv) {
    g_debug_glGetTexLevelParameterfv = g_glGetTexLevelParameterfv;
    g_glGetTexLevelParameterfv = Debug_glGetTexLevelParameterfv;
  }
  if (!g_debug_glGetTexLevelParameteriv) {
    g_debug_glGetTexLevelParameteriv = g_glGetTexLevelParameteriv;
    g_glGetTexLevelParameteriv = Debug_glGetTexLevelParameteriv;
  }
  if (!g_debug_glGetTexParameterfv) {
    g_debug_glGetTexParameterfv = g_glGetTexParameterfv;
    g_glGetTexParameterfv = Debug_glGetTexParameterfv;
  }
  if (!g_debug_glGetTexParameteriv) {
    g_debug_glGetTexParameteriv = g_glGetTexParameteriv;
    g_glGetTexParameteriv = Debug_glGetTexParameteriv;
  }
  if (!g_debug_glGetTranslatedShaderSourceANGLE) {
    g_debug_glGetTranslatedShaderSourceANGLE = g_glGetTranslatedShaderSourceANGLE;
    g_glGetTranslatedShaderSourceANGLE = Debug_glGetTranslatedShaderSourceANGLE;
  }
  if (!g_debug_glGetUniformfv) {
    g_debug_glGetUniformfv = g_glGetUniformfv;
    g_glGetUniformfv = Debug_glGetUniformfv;
  }
  if (!g_debug_glGetUniformiv) {
    g_debug_glGetUniformiv = g_glGetUniformiv;
    g_glGetUniformiv = Debug_glGetUniformiv;
  }
  if (!g_debug_glGetUniformLocation) {
    g_debug_glGetUniformLocation = g_glGetUniformLocation;
    g_glGetUniformLocation = Debug_glGetUniformLocation;
  }
  if (!g_debug_glGetVertexAttribfv) {
    g_debug_glGetVertexAttribfv = g_glGetVertexAttribfv;
    g_glGetVertexAttribfv = Debug_glGetVertexAttribfv;
  }
  if (!g_debug_glGetVertexAttribiv) {
    g_debug_glGetVertexAttribiv = g_glGetVertexAttribiv;
    g_glGetVertexAttribiv = Debug_glGetVertexAttribiv;
  }
  if (!g_debug_glGetVertexAttribPointerv) {
    g_debug_glGetVertexAttribPointerv = g_glGetVertexAttribPointerv;
    g_glGetVertexAttribPointerv = Debug_glGetVertexAttribPointerv;
  }
  if (!g_debug_glHint) {
    g_debug_glHint = g_glHint;
    g_glHint = Debug_glHint;
  }
  if (!g_debug_glIsBuffer) {
    g_debug_glIsBuffer = g_glIsBuffer;
    g_glIsBuffer = Debug_glIsBuffer;
  }
  if (!g_debug_glIsEnabled) {
    g_debug_glIsEnabled = g_glIsEnabled;
    g_glIsEnabled = Debug_glIsEnabled;
  }
  if (!g_debug_glIsFramebufferEXT) {
    g_debug_glIsFramebufferEXT = g_glIsFramebufferEXT;
    g_glIsFramebufferEXT = Debug_glIsFramebufferEXT;
  }
  if (!g_debug_glIsFramebufferEXT) {
    g_debug_glIsFramebufferEXT = g_glIsFramebufferEXT;
    g_glIsFramebufferEXT = Debug_glIsFramebufferEXT;
  }
  if (!g_debug_glIsProgram) {
    g_debug_glIsProgram = g_glIsProgram;
    g_glIsProgram = Debug_glIsProgram;
  }
  if (!g_debug_glIsRenderbufferEXT) {
    g_debug_glIsRenderbufferEXT = g_glIsRenderbufferEXT;
    g_glIsRenderbufferEXT = Debug_glIsRenderbufferEXT;
  }
  if (!g_debug_glIsRenderbufferEXT) {
    g_debug_glIsRenderbufferEXT = g_glIsRenderbufferEXT;
    g_glIsRenderbufferEXT = Debug_glIsRenderbufferEXT;
  }
  if (!g_debug_glIsShader) {
    g_debug_glIsShader = g_glIsShader;
    g_glIsShader = Debug_glIsShader;
  }
  if (!g_debug_glIsTexture) {
    g_debug_glIsTexture = g_glIsTexture;
    g_glIsTexture = Debug_glIsTexture;
  }
  if (!g_debug_glLineWidth) {
    g_debug_glLineWidth = g_glLineWidth;
    g_glLineWidth = Debug_glLineWidth;
  }
  if (!g_debug_glLinkProgram) {
    g_debug_glLinkProgram = g_glLinkProgram;
    g_glLinkProgram = Debug_glLinkProgram;
  }
  if (!g_debug_glMapBuffer) {
    g_debug_glMapBuffer = g_glMapBuffer;
    g_glMapBuffer = Debug_glMapBuffer;
  }
  if (!g_debug_glPixelStorei) {
    g_debug_glPixelStorei = g_glPixelStorei;
    g_glPixelStorei = Debug_glPixelStorei;
  }
  if (!g_debug_glPolygonOffset) {
    g_debug_glPolygonOffset = g_glPolygonOffset;
    g_glPolygonOffset = Debug_glPolygonOffset;
  }
  if (!g_debug_glReadBuffer) {
    g_debug_glReadBuffer = g_glReadBuffer;
    g_glReadBuffer = Debug_glReadBuffer;
  }
  if (!g_debug_glReadPixels) {
    g_debug_glReadPixels = g_glReadPixels;
    g_glReadPixels = Debug_glReadPixels;
  }
  if (!g_debug_glReleaseShaderCompiler) {
    g_debug_glReleaseShaderCompiler = g_glReleaseShaderCompiler;
    g_glReleaseShaderCompiler = Debug_glReleaseShaderCompiler;
  }
  if (!g_debug_glRenderbufferStorageMultisampleEXT) {
    g_debug_glRenderbufferStorageMultisampleEXT = g_glRenderbufferStorageMultisampleEXT;
    g_glRenderbufferStorageMultisampleEXT = Debug_glRenderbufferStorageMultisampleEXT;
  }
  if (!g_debug_glRenderbufferStorageMultisampleEXT) {
    g_debug_glRenderbufferStorageMultisampleEXT = g_glRenderbufferStorageMultisampleEXT;
    g_glRenderbufferStorageMultisampleEXT = Debug_glRenderbufferStorageMultisampleEXT;
  }
  if (!g_debug_glRenderbufferStorageMultisampleANGLE) {
    g_debug_glRenderbufferStorageMultisampleANGLE = g_glRenderbufferStorageMultisampleANGLE;
    g_glRenderbufferStorageMultisampleANGLE = Debug_glRenderbufferStorageMultisampleANGLE;
  }
  if (!g_debug_glRenderbufferStorageMultisampleANGLE) {
    g_debug_glRenderbufferStorageMultisampleANGLE = g_glRenderbufferStorageMultisampleANGLE;
    g_glRenderbufferStorageMultisampleANGLE = Debug_glRenderbufferStorageMultisampleANGLE;
  }
  if (!g_debug_glRenderbufferStorageEXT) {
    g_debug_glRenderbufferStorageEXT = g_glRenderbufferStorageEXT;
    g_glRenderbufferStorageEXT = Debug_glRenderbufferStorageEXT;
  }
  if (!g_debug_glRenderbufferStorageEXT) {
    g_debug_glRenderbufferStorageEXT = g_glRenderbufferStorageEXT;
    g_glRenderbufferStorageEXT = Debug_glRenderbufferStorageEXT;
  }
  if (!g_debug_glSampleCoverage) {
    g_debug_glSampleCoverage = g_glSampleCoverage;
    g_glSampleCoverage = Debug_glSampleCoverage;
  }
  if (!g_debug_glScissor) {
    g_debug_glScissor = g_glScissor;
    g_glScissor = Debug_glScissor;
  }
  if (!g_debug_glShaderBinary) {
    g_debug_glShaderBinary = g_glShaderBinary;
    g_glShaderBinary = Debug_glShaderBinary;
  }
  if (!g_debug_glShaderSource) {
    g_debug_glShaderSource = g_glShaderSource;
    g_glShaderSource = Debug_glShaderSource;
  }
  if (!g_debug_glStencilFunc) {
    g_debug_glStencilFunc = g_glStencilFunc;
    g_glStencilFunc = Debug_glStencilFunc;
  }
  if (!g_debug_glStencilFuncSeparate) {
    g_debug_glStencilFuncSeparate = g_glStencilFuncSeparate;
    g_glStencilFuncSeparate = Debug_glStencilFuncSeparate;
  }
  if (!g_debug_glStencilMask) {
    g_debug_glStencilMask = g_glStencilMask;
    g_glStencilMask = Debug_glStencilMask;
  }
  if (!g_debug_glStencilMaskSeparate) {
    g_debug_glStencilMaskSeparate = g_glStencilMaskSeparate;
    g_glStencilMaskSeparate = Debug_glStencilMaskSeparate;
  }
  if (!g_debug_glStencilOp) {
    g_debug_glStencilOp = g_glStencilOp;
    g_glStencilOp = Debug_glStencilOp;
  }
  if (!g_debug_glStencilOpSeparate) {
    g_debug_glStencilOpSeparate = g_glStencilOpSeparate;
    g_glStencilOpSeparate = Debug_glStencilOpSeparate;
  }
  if (!g_debug_glTexImage2D) {
    g_debug_glTexImage2D = g_glTexImage2D;
    g_glTexImage2D = Debug_glTexImage2D;
  }
  if (!g_debug_glTexParameterf) {
    g_debug_glTexParameterf = g_glTexParameterf;
    g_glTexParameterf = Debug_glTexParameterf;
  }
  if (!g_debug_glTexParameterfv) {
    g_debug_glTexParameterfv = g_glTexParameterfv;
    g_glTexParameterfv = Debug_glTexParameterfv;
  }
  if (!g_debug_glTexParameteri) {
    g_debug_glTexParameteri = g_glTexParameteri;
    g_glTexParameteri = Debug_glTexParameteri;
  }
  if (!g_debug_glTexParameteriv) {
    g_debug_glTexParameteriv = g_glTexParameteriv;
    g_glTexParameteriv = Debug_glTexParameteriv;
  }
  if (!g_debug_glTexSubImage2D) {
    g_debug_glTexSubImage2D = g_glTexSubImage2D;
    g_glTexSubImage2D = Debug_glTexSubImage2D;
  }
  if (!g_debug_glUniform1f) {
    g_debug_glUniform1f = g_glUniform1f;
    g_glUniform1f = Debug_glUniform1f;
  }
  if (!g_debug_glUniform1fv) {
    g_debug_glUniform1fv = g_glUniform1fv;
    g_glUniform1fv = Debug_glUniform1fv;
  }
  if (!g_debug_glUniform1i) {
    g_debug_glUniform1i = g_glUniform1i;
    g_glUniform1i = Debug_glUniform1i;
  }
  if (!g_debug_glUniform1iv) {
    g_debug_glUniform1iv = g_glUniform1iv;
    g_glUniform1iv = Debug_glUniform1iv;
  }
  if (!g_debug_glUniform2f) {
    g_debug_glUniform2f = g_glUniform2f;
    g_glUniform2f = Debug_glUniform2f;
  }
  if (!g_debug_glUniform2fv) {
    g_debug_glUniform2fv = g_glUniform2fv;
    g_glUniform2fv = Debug_glUniform2fv;
  }
  if (!g_debug_glUniform2i) {
    g_debug_glUniform2i = g_glUniform2i;
    g_glUniform2i = Debug_glUniform2i;
  }
  if (!g_debug_glUniform2iv) {
    g_debug_glUniform2iv = g_glUniform2iv;
    g_glUniform2iv = Debug_glUniform2iv;
  }
  if (!g_debug_glUniform3f) {
    g_debug_glUniform3f = g_glUniform3f;
    g_glUniform3f = Debug_glUniform3f;
  }
  if (!g_debug_glUniform3fv) {
    g_debug_glUniform3fv = g_glUniform3fv;
    g_glUniform3fv = Debug_glUniform3fv;
  }
  if (!g_debug_glUniform3i) {
    g_debug_glUniform3i = g_glUniform3i;
    g_glUniform3i = Debug_glUniform3i;
  }
  if (!g_debug_glUniform3iv) {
    g_debug_glUniform3iv = g_glUniform3iv;
    g_glUniform3iv = Debug_glUniform3iv;
  }
  if (!g_debug_glUniform4f) {
    g_debug_glUniform4f = g_glUniform4f;
    g_glUniform4f = Debug_glUniform4f;
  }
  if (!g_debug_glUniform4fv) {
    g_debug_glUniform4fv = g_glUniform4fv;
    g_glUniform4fv = Debug_glUniform4fv;
  }
  if (!g_debug_glUniform4i) {
    g_debug_glUniform4i = g_glUniform4i;
    g_glUniform4i = Debug_glUniform4i;
  }
  if (!g_debug_glUniform4iv) {
    g_debug_glUniform4iv = g_glUniform4iv;
    g_glUniform4iv = Debug_glUniform4iv;
  }
  if (!g_debug_glUniformMatrix2fv) {
    g_debug_glUniformMatrix2fv = g_glUniformMatrix2fv;
    g_glUniformMatrix2fv = Debug_glUniformMatrix2fv;
  }
  if (!g_debug_glUniformMatrix3fv) {
    g_debug_glUniformMatrix3fv = g_glUniformMatrix3fv;
    g_glUniformMatrix3fv = Debug_glUniformMatrix3fv;
  }
  if (!g_debug_glUniformMatrix4fv) {
    g_debug_glUniformMatrix4fv = g_glUniformMatrix4fv;
    g_glUniformMatrix4fv = Debug_glUniformMatrix4fv;
  }
  if (!g_debug_glUnmapBuffer) {
    g_debug_glUnmapBuffer = g_glUnmapBuffer;
    g_glUnmapBuffer = Debug_glUnmapBuffer;
  }
  if (!g_debug_glUseProgram) {
    g_debug_glUseProgram = g_glUseProgram;
    g_glUseProgram = Debug_glUseProgram;
  }
  if (!g_debug_glValidateProgram) {
    g_debug_glValidateProgram = g_glValidateProgram;
    g_glValidateProgram = Debug_glValidateProgram;
  }
  if (!g_debug_glVertexAttrib1f) {
    g_debug_glVertexAttrib1f = g_glVertexAttrib1f;
    g_glVertexAttrib1f = Debug_glVertexAttrib1f;
  }
  if (!g_debug_glVertexAttrib1fv) {
    g_debug_glVertexAttrib1fv = g_glVertexAttrib1fv;
    g_glVertexAttrib1fv = Debug_glVertexAttrib1fv;
  }
  if (!g_debug_glVertexAttrib2f) {
    g_debug_glVertexAttrib2f = g_glVertexAttrib2f;
    g_glVertexAttrib2f = Debug_glVertexAttrib2f;
  }
  if (!g_debug_glVertexAttrib2fv) {
    g_debug_glVertexAttrib2fv = g_glVertexAttrib2fv;
    g_glVertexAttrib2fv = Debug_glVertexAttrib2fv;
  }
  if (!g_debug_glVertexAttrib3f) {
    g_debug_glVertexAttrib3f = g_glVertexAttrib3f;
    g_glVertexAttrib3f = Debug_glVertexAttrib3f;
  }
  if (!g_debug_glVertexAttrib3fv) {
    g_debug_glVertexAttrib3fv = g_glVertexAttrib3fv;
    g_glVertexAttrib3fv = Debug_glVertexAttrib3fv;
  }
  if (!g_debug_glVertexAttrib4f) {
    g_debug_glVertexAttrib4f = g_glVertexAttrib4f;
    g_glVertexAttrib4f = Debug_glVertexAttrib4f;
  }
  if (!g_debug_glVertexAttrib4fv) {
    g_debug_glVertexAttrib4fv = g_glVertexAttrib4fv;
    g_glVertexAttrib4fv = Debug_glVertexAttrib4fv;
  }
  if (!g_debug_glVertexAttribPointer) {
    g_debug_glVertexAttribPointer = g_glVertexAttribPointer;
    g_glVertexAttribPointer = Debug_glVertexAttribPointer;
  }
  if (!g_debug_glViewport) {
    g_debug_glViewport = g_glViewport;
    g_glViewport = Debug_glViewport;
  }
  if (!g_debug_glGenFencesNV) {
    g_debug_glGenFencesNV = g_glGenFencesNV;
    g_glGenFencesNV = Debug_glGenFencesNV;
  }
  if (!g_debug_glDeleteFencesNV) {
    g_debug_glDeleteFencesNV = g_glDeleteFencesNV;
    g_glDeleteFencesNV = Debug_glDeleteFencesNV;
  }
  if (!g_debug_glSetFenceNV) {
    g_debug_glSetFenceNV = g_glSetFenceNV;
    g_glSetFenceNV = Debug_glSetFenceNV;
  }
  if (!g_debug_glTestFenceNV) {
    g_debug_glTestFenceNV = g_glTestFenceNV;
    g_glTestFenceNV = Debug_glTestFenceNV;
  }
  if (!g_debug_glFinishFenceNV) {
    g_debug_glFinishFenceNV = g_glFinishFenceNV;
    g_glFinishFenceNV = Debug_glFinishFenceNV;
  }
  if (!g_debug_glIsFenceNV) {
    g_debug_glIsFenceNV = g_glIsFenceNV;
    g_glIsFenceNV = Debug_glIsFenceNV;
  }
  if (!g_debug_glGetFenceivNV) {
    g_debug_glGetFenceivNV = g_glGetFenceivNV;
    g_glGetFenceivNV = Debug_glGetFenceivNV;
  }
}

}  // namespace gfx
