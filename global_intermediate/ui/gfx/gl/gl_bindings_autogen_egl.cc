// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is automatically generated.

#include "ui/gfx/gl/gl_bindings.h"
#include "ui/gfx/gl/gl_implementation.h"

namespace gfx {

eglGetErrorProc g_eglGetError;
eglGetDisplayProc g_eglGetDisplay;
eglInitializeProc g_eglInitialize;
eglTerminateProc g_eglTerminate;
eglQueryStringProc g_eglQueryString;
eglGetConfigsProc g_eglGetConfigs;
eglChooseConfigProc g_eglChooseConfig;
eglGetConfigAttribProc g_eglGetConfigAttrib;
eglCreateImageKHRProc g_eglCreateImageKHR;
eglDestroyImageKHRProc g_eglDestroyImageKHR;
eglCreateWindowSurfaceProc g_eglCreateWindowSurface;
eglCreatePbufferSurfaceProc g_eglCreatePbufferSurface;
eglCreatePixmapSurfaceProc g_eglCreatePixmapSurface;
eglDestroySurfaceProc g_eglDestroySurface;
eglQuerySurfaceProc g_eglQuerySurface;
eglBindAPIProc g_eglBindAPI;
eglQueryAPIProc g_eglQueryAPI;
eglWaitClientProc g_eglWaitClient;
eglReleaseThreadProc g_eglReleaseThread;
eglCreatePbufferFromClientBufferProc g_eglCreatePbufferFromClientBuffer;
eglSurfaceAttribProc g_eglSurfaceAttrib;
eglBindTexImageProc g_eglBindTexImage;
eglReleaseTexImageProc g_eglReleaseTexImage;
eglSwapIntervalProc g_eglSwapInterval;
eglCreateContextProc g_eglCreateContext;
eglDestroyContextProc g_eglDestroyContext;
eglMakeCurrentProc g_eglMakeCurrent;
eglGetCurrentContextProc g_eglGetCurrentContext;
eglGetCurrentSurfaceProc g_eglGetCurrentSurface;
eglGetCurrentDisplayProc g_eglGetCurrentDisplay;
eglQueryContextProc g_eglQueryContext;
eglWaitGLProc g_eglWaitGL;
eglWaitNativeProc g_eglWaitNative;
eglSwapBuffersProc g_eglSwapBuffers;
eglCopyBuffersProc g_eglCopyBuffers;
eglGetProcAddressProc g_eglGetProcAddress;

static eglGetErrorProc g_debug_eglGetError;
static eglGetDisplayProc g_debug_eglGetDisplay;
static eglInitializeProc g_debug_eglInitialize;
static eglTerminateProc g_debug_eglTerminate;
static eglQueryStringProc g_debug_eglQueryString;
static eglGetConfigsProc g_debug_eglGetConfigs;
static eglChooseConfigProc g_debug_eglChooseConfig;
static eglGetConfigAttribProc g_debug_eglGetConfigAttrib;
static eglCreateImageKHRProc g_debug_eglCreateImageKHR;
static eglDestroyImageKHRProc g_debug_eglDestroyImageKHR;
static eglCreateWindowSurfaceProc g_debug_eglCreateWindowSurface;
static eglCreatePbufferSurfaceProc g_debug_eglCreatePbufferSurface;
static eglCreatePixmapSurfaceProc g_debug_eglCreatePixmapSurface;
static eglDestroySurfaceProc g_debug_eglDestroySurface;
static eglQuerySurfaceProc g_debug_eglQuerySurface;
static eglBindAPIProc g_debug_eglBindAPI;
static eglQueryAPIProc g_debug_eglQueryAPI;
static eglWaitClientProc g_debug_eglWaitClient;
static eglReleaseThreadProc g_debug_eglReleaseThread;
static eglCreatePbufferFromClientBufferProc g_debug_eglCreatePbufferFromClientBuffer;
static eglSurfaceAttribProc g_debug_eglSurfaceAttrib;
static eglBindTexImageProc g_debug_eglBindTexImage;
static eglReleaseTexImageProc g_debug_eglReleaseTexImage;
static eglSwapIntervalProc g_debug_eglSwapInterval;
static eglCreateContextProc g_debug_eglCreateContext;
static eglDestroyContextProc g_debug_eglDestroyContext;
static eglMakeCurrentProc g_debug_eglMakeCurrent;
static eglGetCurrentContextProc g_debug_eglGetCurrentContext;
static eglGetCurrentSurfaceProc g_debug_eglGetCurrentSurface;
static eglGetCurrentDisplayProc g_debug_eglGetCurrentDisplay;
static eglQueryContextProc g_debug_eglQueryContext;
static eglWaitGLProc g_debug_eglWaitGL;
static eglWaitNativeProc g_debug_eglWaitNative;
static eglSwapBuffersProc g_debug_eglSwapBuffers;
static eglCopyBuffersProc g_debug_eglCopyBuffers;
static eglGetProcAddressProc g_debug_eglGetProcAddress;

void InitializeGLBindingsEGL() {
  if (!g_eglGetError)
    g_eglGetError = reinterpret_cast<eglGetErrorProc>(GetGLProcAddress("eglGetError"));
  if (!g_eglGetDisplay)
    g_eglGetDisplay = reinterpret_cast<eglGetDisplayProc>(GetGLProcAddress("eglGetDisplay"));
  if (!g_eglInitialize)
    g_eglInitialize = reinterpret_cast<eglInitializeProc>(GetGLProcAddress("eglInitialize"));
  if (!g_eglTerminate)
    g_eglTerminate = reinterpret_cast<eglTerminateProc>(GetGLProcAddress("eglTerminate"));
  if (!g_eglQueryString)
    g_eglQueryString = reinterpret_cast<eglQueryStringProc>(GetGLProcAddress("eglQueryString"));
  if (!g_eglGetConfigs)
    g_eglGetConfigs = reinterpret_cast<eglGetConfigsProc>(GetGLProcAddress("eglGetConfigs"));
  if (!g_eglChooseConfig)
    g_eglChooseConfig = reinterpret_cast<eglChooseConfigProc>(GetGLProcAddress("eglChooseConfig"));
  if (!g_eglGetConfigAttrib)
    g_eglGetConfigAttrib = reinterpret_cast<eglGetConfigAttribProc>(GetGLProcAddress("eglGetConfigAttrib"));
  if (!g_eglCreateImageKHR)
    g_eglCreateImageKHR = reinterpret_cast<eglCreateImageKHRProc>(GetGLProcAddress("eglCreateImageKHR"));
  if (!g_eglDestroyImageKHR)
    g_eglDestroyImageKHR = reinterpret_cast<eglDestroyImageKHRProc>(GetGLProcAddress("eglDestroyImageKHR"));
  if (!g_eglCreateWindowSurface)
    g_eglCreateWindowSurface = reinterpret_cast<eglCreateWindowSurfaceProc>(GetGLProcAddress("eglCreateWindowSurface"));
  if (!g_eglCreatePbufferSurface)
    g_eglCreatePbufferSurface = reinterpret_cast<eglCreatePbufferSurfaceProc>(GetGLProcAddress("eglCreatePbufferSurface"));
  if (!g_eglCreatePixmapSurface)
    g_eglCreatePixmapSurface = reinterpret_cast<eglCreatePixmapSurfaceProc>(GetGLProcAddress("eglCreatePixmapSurface"));
  if (!g_eglDestroySurface)
    g_eglDestroySurface = reinterpret_cast<eglDestroySurfaceProc>(GetGLProcAddress("eglDestroySurface"));
  if (!g_eglQuerySurface)
    g_eglQuerySurface = reinterpret_cast<eglQuerySurfaceProc>(GetGLProcAddress("eglQuerySurface"));
  if (!g_eglBindAPI)
    g_eglBindAPI = reinterpret_cast<eglBindAPIProc>(GetGLProcAddress("eglBindAPI"));
  if (!g_eglQueryAPI)
    g_eglQueryAPI = reinterpret_cast<eglQueryAPIProc>(GetGLProcAddress("eglQueryAPI"));
  if (!g_eglWaitClient)
    g_eglWaitClient = reinterpret_cast<eglWaitClientProc>(GetGLProcAddress("eglWaitClient"));
  if (!g_eglReleaseThread)
    g_eglReleaseThread = reinterpret_cast<eglReleaseThreadProc>(GetGLProcAddress("eglReleaseThread"));
  if (!g_eglCreatePbufferFromClientBuffer)
    g_eglCreatePbufferFromClientBuffer = reinterpret_cast<eglCreatePbufferFromClientBufferProc>(GetGLProcAddress("eglCreatePbufferFromClientBuffer"));
  if (!g_eglSurfaceAttrib)
    g_eglSurfaceAttrib = reinterpret_cast<eglSurfaceAttribProc>(GetGLProcAddress("eglSurfaceAttrib"));
  if (!g_eglBindTexImage)
    g_eglBindTexImage = reinterpret_cast<eglBindTexImageProc>(GetGLProcAddress("eglBindTexImage"));
  if (!g_eglReleaseTexImage)
    g_eglReleaseTexImage = reinterpret_cast<eglReleaseTexImageProc>(GetGLProcAddress("eglReleaseTexImage"));
  if (!g_eglSwapInterval)
    g_eglSwapInterval = reinterpret_cast<eglSwapIntervalProc>(GetGLProcAddress("eglSwapInterval"));
  if (!g_eglCreateContext)
    g_eglCreateContext = reinterpret_cast<eglCreateContextProc>(GetGLProcAddress("eglCreateContext"));
  if (!g_eglDestroyContext)
    g_eglDestroyContext = reinterpret_cast<eglDestroyContextProc>(GetGLProcAddress("eglDestroyContext"));
  if (!g_eglMakeCurrent)
    g_eglMakeCurrent = reinterpret_cast<eglMakeCurrentProc>(GetGLProcAddress("eglMakeCurrent"));
  if (!g_eglGetCurrentContext)
    g_eglGetCurrentContext = reinterpret_cast<eglGetCurrentContextProc>(GetGLProcAddress("eglGetCurrentContext"));
  if (!g_eglGetCurrentSurface)
    g_eglGetCurrentSurface = reinterpret_cast<eglGetCurrentSurfaceProc>(GetGLProcAddress("eglGetCurrentSurface"));
  if (!g_eglGetCurrentDisplay)
    g_eglGetCurrentDisplay = reinterpret_cast<eglGetCurrentDisplayProc>(GetGLProcAddress("eglGetCurrentDisplay"));
  if (!g_eglQueryContext)
    g_eglQueryContext = reinterpret_cast<eglQueryContextProc>(GetGLProcAddress("eglQueryContext"));
  if (!g_eglWaitGL)
    g_eglWaitGL = reinterpret_cast<eglWaitGLProc>(GetGLProcAddress("eglWaitGL"));
  if (!g_eglWaitNative)
    g_eglWaitNative = reinterpret_cast<eglWaitNativeProc>(GetGLProcAddress("eglWaitNative"));
  if (!g_eglSwapBuffers)
    g_eglSwapBuffers = reinterpret_cast<eglSwapBuffersProc>(GetGLProcAddress("eglSwapBuffers"));
  if (!g_eglCopyBuffers)
    g_eglCopyBuffers = reinterpret_cast<eglCopyBuffersProc>(GetGLProcAddress("eglCopyBuffers"));
  if (!g_eglGetProcAddress)
    g_eglGetProcAddress = reinterpret_cast<eglGetProcAddressProc>(GetGLProcAddress("eglGetProcAddress"));
}

extern "C" {

static EGLint GL_BINDING_CALL Debug_eglGetError(void) {
  GL_SERVICE_LOG("eglGetError" << "("  << ")");
  EGLint result = g_debug_eglGetError();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLDisplay GL_BINDING_CALL Debug_eglGetDisplay(EGLNativeDisplayType display_id) {
  GL_SERVICE_LOG("eglGetDisplay" << "("  << display_id << ")");
  EGLDisplay result = g_debug_eglGetDisplay(display_id);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglInitialize(EGLDisplay dpy, EGLint* major, EGLint* minor) {
  GL_SERVICE_LOG("eglInitialize" << "("  << dpy << ", " << static_cast<const void*>(major) << ", " << static_cast<const void*>(minor) << ")");
  EGLBoolean result = g_debug_eglInitialize(dpy, major, minor);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglTerminate(EGLDisplay dpy) {
  GL_SERVICE_LOG("eglTerminate" << "("  << dpy << ")");
  EGLBoolean result = g_debug_eglTerminate(dpy);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static const char* GL_BINDING_CALL Debug_eglQueryString(EGLDisplay dpy, EGLint name) {
  GL_SERVICE_LOG("eglQueryString" << "("  << dpy << ", " << name << ")");
  const char* result = g_debug_eglQueryString(dpy, name);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglGetConfigs(EGLDisplay dpy, EGLConfig* configs, EGLint config_size, EGLint* num_config) {
  GL_SERVICE_LOG("eglGetConfigs" << "("  << dpy << ", " << static_cast<const void*>(configs) << ", " << config_size << ", " << static_cast<const void*>(num_config) << ")");
  EGLBoolean result = g_debug_eglGetConfigs(dpy, configs, config_size, num_config);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglChooseConfig(EGLDisplay dpy, const EGLint* attrib_list, EGLConfig* configs, EGLint config_size, EGLint* num_config) {
  GL_SERVICE_LOG("eglChooseConfig" << "("  << dpy << ", " << static_cast<const void*>(attrib_list) << ", " << static_cast<const void*>(configs) << ", " << config_size << ", " << static_cast<const void*>(num_config) << ")");
  EGLBoolean result = g_debug_eglChooseConfig(dpy, attrib_list, configs, config_size, num_config);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint* value) {
  GL_SERVICE_LOG("eglGetConfigAttrib" << "("  << dpy << ", " << config << ", " << attribute << ", " << static_cast<const void*>(value) << ")");
  EGLBoolean result = g_debug_eglGetConfigAttrib(dpy, config, attribute, value);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLImageKHR GL_BINDING_CALL Debug_eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint* attrib_list) {
  GL_SERVICE_LOG("eglCreateImageKHR" << "("  << dpy << ", " << ctx << ", " << target << ", " << buffer << ", " << static_cast<const void*>(attrib_list) << ")");
  EGLImageKHR result = g_debug_eglCreateImageKHR(dpy, ctx, target, buffer, attrib_list);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image) {
  GL_SERVICE_LOG("eglDestroyImageKHR" << "("  << dpy << ", " << image << ")");
  EGLBoolean result = g_debug_eglDestroyImageKHR(dpy, image);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLSurface GL_BINDING_CALL Debug_eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint* attrib_list) {
  GL_SERVICE_LOG("eglCreateWindowSurface" << "("  << dpy << ", " << config << ", " << win << ", " << static_cast<const void*>(attrib_list) << ")");
  EGLSurface result = g_debug_eglCreateWindowSurface(dpy, config, win, attrib_list);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLSurface GL_BINDING_CALL Debug_eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint* attrib_list) {
  GL_SERVICE_LOG("eglCreatePbufferSurface" << "("  << dpy << ", " << config << ", " << static_cast<const void*>(attrib_list) << ")");
  EGLSurface result = g_debug_eglCreatePbufferSurface(dpy, config, attrib_list);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLSurface GL_BINDING_CALL Debug_eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint* attrib_list) {
  GL_SERVICE_LOG("eglCreatePixmapSurface" << "("  << dpy << ", " << config << ", " << pixmap << ", " << static_cast<const void*>(attrib_list) << ")");
  EGLSurface result = g_debug_eglCreatePixmapSurface(dpy, config, pixmap, attrib_list);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglDestroySurface(EGLDisplay dpy, EGLSurface surface) {
  GL_SERVICE_LOG("eglDestroySurface" << "("  << dpy << ", " << surface << ")");
  EGLBoolean result = g_debug_eglDestroySurface(dpy, surface);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint* value) {
  GL_SERVICE_LOG("eglQuerySurface" << "("  << dpy << ", " << surface << ", " << attribute << ", " << static_cast<const void*>(value) << ")");
  EGLBoolean result = g_debug_eglQuerySurface(dpy, surface, attribute, value);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglBindAPI(EGLenum api) {
  GL_SERVICE_LOG("eglBindAPI" << "("  << api << ")");
  EGLBoolean result = g_debug_eglBindAPI(api);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLenum GL_BINDING_CALL Debug_eglQueryAPI(void) {
  GL_SERVICE_LOG("eglQueryAPI" << "("  << ")");
  EGLenum result = g_debug_eglQueryAPI();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglWaitClient(void) {
  GL_SERVICE_LOG("eglWaitClient" << "("  << ")");
  EGLBoolean result = g_debug_eglWaitClient();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglReleaseThread(void) {
  GL_SERVICE_LOG("eglReleaseThread" << "("  << ")");
  EGLBoolean result = g_debug_eglReleaseThread();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLSurface GL_BINDING_CALL Debug_eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, void* buffer, EGLConfig config, const EGLint* attrib_list) {
  GL_SERVICE_LOG("eglCreatePbufferFromClientBuffer" << "("  << dpy << ", " << buftype << ", " << static_cast<const void*>(buffer) << ", " << config << ", " << static_cast<const void*>(attrib_list) << ")");
  EGLSurface result = g_debug_eglCreatePbufferFromClientBuffer(dpy, buftype, buffer, config, attrib_list);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value) {
  GL_SERVICE_LOG("eglSurfaceAttrib" << "("  << dpy << ", " << surface << ", " << attribute << ", " << value << ")");
  EGLBoolean result = g_debug_eglSurfaceAttrib(dpy, surface, attribute, value);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) {
  GL_SERVICE_LOG("eglBindTexImage" << "("  << dpy << ", " << surface << ", " << buffer << ")");
  EGLBoolean result = g_debug_eglBindTexImage(dpy, surface, buffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) {
  GL_SERVICE_LOG("eglReleaseTexImage" << "("  << dpy << ", " << surface << ", " << buffer << ")");
  EGLBoolean result = g_debug_eglReleaseTexImage(dpy, surface, buffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglSwapInterval(EGLDisplay dpy, EGLint interval) {
  GL_SERVICE_LOG("eglSwapInterval" << "("  << dpy << ", " << interval << ")");
  EGLBoolean result = g_debug_eglSwapInterval(dpy, interval);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLContext GL_BINDING_CALL Debug_eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint* attrib_list) {
  GL_SERVICE_LOG("eglCreateContext" << "("  << dpy << ", " << config << ", " << share_context << ", " << static_cast<const void*>(attrib_list) << ")");
  EGLContext result = g_debug_eglCreateContext(dpy, config, share_context, attrib_list);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglDestroyContext(EGLDisplay dpy, EGLContext ctx) {
  GL_SERVICE_LOG("eglDestroyContext" << "("  << dpy << ", " << ctx << ")");
  EGLBoolean result = g_debug_eglDestroyContext(dpy, ctx);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx) {
  GL_SERVICE_LOG("eglMakeCurrent" << "("  << dpy << ", " << draw << ", " << read << ", " << ctx << ")");
  EGLBoolean result = g_debug_eglMakeCurrent(dpy, draw, read, ctx);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLContext GL_BINDING_CALL Debug_eglGetCurrentContext(void) {
  GL_SERVICE_LOG("eglGetCurrentContext" << "("  << ")");
  EGLContext result = g_debug_eglGetCurrentContext();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLSurface GL_BINDING_CALL Debug_eglGetCurrentSurface(EGLint readdraw) {
  GL_SERVICE_LOG("eglGetCurrentSurface" << "("  << readdraw << ")");
  EGLSurface result = g_debug_eglGetCurrentSurface(readdraw);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLDisplay GL_BINDING_CALL Debug_eglGetCurrentDisplay(void) {
  GL_SERVICE_LOG("eglGetCurrentDisplay" << "("  << ")");
  EGLDisplay result = g_debug_eglGetCurrentDisplay();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint* value) {
  GL_SERVICE_LOG("eglQueryContext" << "("  << dpy << ", " << ctx << ", " << attribute << ", " << static_cast<const void*>(value) << ")");
  EGLBoolean result = g_debug_eglQueryContext(dpy, ctx, attribute, value);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglWaitGL(void) {
  GL_SERVICE_LOG("eglWaitGL" << "("  << ")");
  EGLBoolean result = g_debug_eglWaitGL();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglWaitNative(EGLint engine) {
  GL_SERVICE_LOG("eglWaitNative" << "("  << engine << ")");
  EGLBoolean result = g_debug_eglWaitNative(engine);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglSwapBuffers(EGLDisplay dpy, EGLSurface surface) {
  GL_SERVICE_LOG("eglSwapBuffers" << "("  << dpy << ", " << surface << ")");
  EGLBoolean result = g_debug_eglSwapBuffers(dpy, surface);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static EGLBoolean GL_BINDING_CALL Debug_eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target) {
  GL_SERVICE_LOG("eglCopyBuffers" << "("  << dpy << ", " << surface << ", " << target << ")");
  EGLBoolean result = g_debug_eglCopyBuffers(dpy, surface, target);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static __eglMustCastToProperFunctionPointerType GL_BINDING_CALL Debug_eglGetProcAddress(const char* procname) {
  GL_SERVICE_LOG("eglGetProcAddress" << "("  << static_cast<const void*>(procname) << ")");
  __eglMustCastToProperFunctionPointerType result = g_debug_eglGetProcAddress(procname);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}
}  // extern "C"

void InitializeDebugGLBindingsEGL() {
  if (!g_debug_eglGetError) {
    g_debug_eglGetError = g_eglGetError;
    g_eglGetError = Debug_eglGetError;
  }
  if (!g_debug_eglGetDisplay) {
    g_debug_eglGetDisplay = g_eglGetDisplay;
    g_eglGetDisplay = Debug_eglGetDisplay;
  }
  if (!g_debug_eglInitialize) {
    g_debug_eglInitialize = g_eglInitialize;
    g_eglInitialize = Debug_eglInitialize;
  }
  if (!g_debug_eglTerminate) {
    g_debug_eglTerminate = g_eglTerminate;
    g_eglTerminate = Debug_eglTerminate;
  }
  if (!g_debug_eglQueryString) {
    g_debug_eglQueryString = g_eglQueryString;
    g_eglQueryString = Debug_eglQueryString;
  }
  if (!g_debug_eglGetConfigs) {
    g_debug_eglGetConfigs = g_eglGetConfigs;
    g_eglGetConfigs = Debug_eglGetConfigs;
  }
  if (!g_debug_eglChooseConfig) {
    g_debug_eglChooseConfig = g_eglChooseConfig;
    g_eglChooseConfig = Debug_eglChooseConfig;
  }
  if (!g_debug_eglGetConfigAttrib) {
    g_debug_eglGetConfigAttrib = g_eglGetConfigAttrib;
    g_eglGetConfigAttrib = Debug_eglGetConfigAttrib;
  }
  if (!g_debug_eglCreateImageKHR) {
    g_debug_eglCreateImageKHR = g_eglCreateImageKHR;
    g_eglCreateImageKHR = Debug_eglCreateImageKHR;
  }
  if (!g_debug_eglDestroyImageKHR) {
    g_debug_eglDestroyImageKHR = g_eglDestroyImageKHR;
    g_eglDestroyImageKHR = Debug_eglDestroyImageKHR;
  }
  if (!g_debug_eglCreateWindowSurface) {
    g_debug_eglCreateWindowSurface = g_eglCreateWindowSurface;
    g_eglCreateWindowSurface = Debug_eglCreateWindowSurface;
  }
  if (!g_debug_eglCreatePbufferSurface) {
    g_debug_eglCreatePbufferSurface = g_eglCreatePbufferSurface;
    g_eglCreatePbufferSurface = Debug_eglCreatePbufferSurface;
  }
  if (!g_debug_eglCreatePixmapSurface) {
    g_debug_eglCreatePixmapSurface = g_eglCreatePixmapSurface;
    g_eglCreatePixmapSurface = Debug_eglCreatePixmapSurface;
  }
  if (!g_debug_eglDestroySurface) {
    g_debug_eglDestroySurface = g_eglDestroySurface;
    g_eglDestroySurface = Debug_eglDestroySurface;
  }
  if (!g_debug_eglQuerySurface) {
    g_debug_eglQuerySurface = g_eglQuerySurface;
    g_eglQuerySurface = Debug_eglQuerySurface;
  }
  if (!g_debug_eglBindAPI) {
    g_debug_eglBindAPI = g_eglBindAPI;
    g_eglBindAPI = Debug_eglBindAPI;
  }
  if (!g_debug_eglQueryAPI) {
    g_debug_eglQueryAPI = g_eglQueryAPI;
    g_eglQueryAPI = Debug_eglQueryAPI;
  }
  if (!g_debug_eglWaitClient) {
    g_debug_eglWaitClient = g_eglWaitClient;
    g_eglWaitClient = Debug_eglWaitClient;
  }
  if (!g_debug_eglReleaseThread) {
    g_debug_eglReleaseThread = g_eglReleaseThread;
    g_eglReleaseThread = Debug_eglReleaseThread;
  }
  if (!g_debug_eglCreatePbufferFromClientBuffer) {
    g_debug_eglCreatePbufferFromClientBuffer = g_eglCreatePbufferFromClientBuffer;
    g_eglCreatePbufferFromClientBuffer = Debug_eglCreatePbufferFromClientBuffer;
  }
  if (!g_debug_eglSurfaceAttrib) {
    g_debug_eglSurfaceAttrib = g_eglSurfaceAttrib;
    g_eglSurfaceAttrib = Debug_eglSurfaceAttrib;
  }
  if (!g_debug_eglBindTexImage) {
    g_debug_eglBindTexImage = g_eglBindTexImage;
    g_eglBindTexImage = Debug_eglBindTexImage;
  }
  if (!g_debug_eglReleaseTexImage) {
    g_debug_eglReleaseTexImage = g_eglReleaseTexImage;
    g_eglReleaseTexImage = Debug_eglReleaseTexImage;
  }
  if (!g_debug_eglSwapInterval) {
    g_debug_eglSwapInterval = g_eglSwapInterval;
    g_eglSwapInterval = Debug_eglSwapInterval;
  }
  if (!g_debug_eglCreateContext) {
    g_debug_eglCreateContext = g_eglCreateContext;
    g_eglCreateContext = Debug_eglCreateContext;
  }
  if (!g_debug_eglDestroyContext) {
    g_debug_eglDestroyContext = g_eglDestroyContext;
    g_eglDestroyContext = Debug_eglDestroyContext;
  }
  if (!g_debug_eglMakeCurrent) {
    g_debug_eglMakeCurrent = g_eglMakeCurrent;
    g_eglMakeCurrent = Debug_eglMakeCurrent;
  }
  if (!g_debug_eglGetCurrentContext) {
    g_debug_eglGetCurrentContext = g_eglGetCurrentContext;
    g_eglGetCurrentContext = Debug_eglGetCurrentContext;
  }
  if (!g_debug_eglGetCurrentSurface) {
    g_debug_eglGetCurrentSurface = g_eglGetCurrentSurface;
    g_eglGetCurrentSurface = Debug_eglGetCurrentSurface;
  }
  if (!g_debug_eglGetCurrentDisplay) {
    g_debug_eglGetCurrentDisplay = g_eglGetCurrentDisplay;
    g_eglGetCurrentDisplay = Debug_eglGetCurrentDisplay;
  }
  if (!g_debug_eglQueryContext) {
    g_debug_eglQueryContext = g_eglQueryContext;
    g_eglQueryContext = Debug_eglQueryContext;
  }
  if (!g_debug_eglWaitGL) {
    g_debug_eglWaitGL = g_eglWaitGL;
    g_eglWaitGL = Debug_eglWaitGL;
  }
  if (!g_debug_eglWaitNative) {
    g_debug_eglWaitNative = g_eglWaitNative;
    g_eglWaitNative = Debug_eglWaitNative;
  }
  if (!g_debug_eglSwapBuffers) {
    g_debug_eglSwapBuffers = g_eglSwapBuffers;
    g_eglSwapBuffers = Debug_eglSwapBuffers;
  }
  if (!g_debug_eglCopyBuffers) {
    g_debug_eglCopyBuffers = g_eglCopyBuffers;
    g_eglCopyBuffers = Debug_eglCopyBuffers;
  }
  if (!g_debug_eglGetProcAddress) {
    g_debug_eglGetProcAddress = g_eglGetProcAddress;
    g_eglGetProcAddress = Debug_eglGetProcAddress;
  }
}

}  // namespace gfx
