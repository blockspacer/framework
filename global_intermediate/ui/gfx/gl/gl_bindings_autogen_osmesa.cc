// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is automatically generated.

#include "ui/gfx/gl/gl_bindings.h"
#include "ui/gfx/gl/gl_implementation.h"

namespace gfx {

OSMesaCreateContextProc g_OSMesaCreateContext;
OSMesaCreateContextExtProc g_OSMesaCreateContextExt;
OSMesaDestroyContextProc g_OSMesaDestroyContext;
OSMesaMakeCurrentProc g_OSMesaMakeCurrent;
OSMesaGetCurrentContextProc g_OSMesaGetCurrentContext;
OSMesaPixelStoreProc g_OSMesaPixelStore;
OSMesaGetIntegervProc g_OSMesaGetIntegerv;
OSMesaGetDepthBufferProc g_OSMesaGetDepthBuffer;
OSMesaGetColorBufferProc g_OSMesaGetColorBuffer;
OSMesaGetProcAddressProc g_OSMesaGetProcAddress;
OSMesaColorClampProc g_OSMesaColorClamp;

static OSMesaCreateContextProc g_debug_OSMesaCreateContext;
static OSMesaCreateContextExtProc g_debug_OSMesaCreateContextExt;
static OSMesaDestroyContextProc g_debug_OSMesaDestroyContext;
static OSMesaMakeCurrentProc g_debug_OSMesaMakeCurrent;
static OSMesaGetCurrentContextProc g_debug_OSMesaGetCurrentContext;
static OSMesaPixelStoreProc g_debug_OSMesaPixelStore;
static OSMesaGetIntegervProc g_debug_OSMesaGetIntegerv;
static OSMesaGetDepthBufferProc g_debug_OSMesaGetDepthBuffer;
static OSMesaGetColorBufferProc g_debug_OSMesaGetColorBuffer;
static OSMesaGetProcAddressProc g_debug_OSMesaGetProcAddress;
static OSMesaColorClampProc g_debug_OSMesaColorClamp;

void InitializeGLBindingsOSMESA() {
  if (!g_OSMesaCreateContext)
    g_OSMesaCreateContext = reinterpret_cast<OSMesaCreateContextProc>(GetGLProcAddress("OSMesaCreateContext"));
  if (!g_OSMesaCreateContextExt)
    g_OSMesaCreateContextExt = reinterpret_cast<OSMesaCreateContextExtProc>(GetGLProcAddress("OSMesaCreateContextExt"));
  if (!g_OSMesaDestroyContext)
    g_OSMesaDestroyContext = reinterpret_cast<OSMesaDestroyContextProc>(GetGLProcAddress("OSMesaDestroyContext"));
  if (!g_OSMesaMakeCurrent)
    g_OSMesaMakeCurrent = reinterpret_cast<OSMesaMakeCurrentProc>(GetGLProcAddress("OSMesaMakeCurrent"));
  if (!g_OSMesaGetCurrentContext)
    g_OSMesaGetCurrentContext = reinterpret_cast<OSMesaGetCurrentContextProc>(GetGLProcAddress("OSMesaGetCurrentContext"));
  if (!g_OSMesaPixelStore)
    g_OSMesaPixelStore = reinterpret_cast<OSMesaPixelStoreProc>(GetGLProcAddress("OSMesaPixelStore"));
  if (!g_OSMesaGetIntegerv)
    g_OSMesaGetIntegerv = reinterpret_cast<OSMesaGetIntegervProc>(GetGLProcAddress("OSMesaGetIntegerv"));
  if (!g_OSMesaGetDepthBuffer)
    g_OSMesaGetDepthBuffer = reinterpret_cast<OSMesaGetDepthBufferProc>(GetGLProcAddress("OSMesaGetDepthBuffer"));
  if (!g_OSMesaGetColorBuffer)
    g_OSMesaGetColorBuffer = reinterpret_cast<OSMesaGetColorBufferProc>(GetGLProcAddress("OSMesaGetColorBuffer"));
  if (!g_OSMesaGetProcAddress)
    g_OSMesaGetProcAddress = reinterpret_cast<OSMesaGetProcAddressProc>(GetGLProcAddress("OSMesaGetProcAddress"));
  if (!g_OSMesaColorClamp)
    g_OSMesaColorClamp = reinterpret_cast<OSMesaColorClampProc>(GetGLProcAddress("OSMesaColorClamp"));
}

extern "C" {

static OSMesaContext GL_BINDING_CALL Debug_OSMesaCreateContext(GLenum format, OSMesaContext sharelist) {
  GL_SERVICE_LOG("OSMesaCreateContext" << "("  << format << ", " << sharelist << ")");
  OSMesaContext result = g_debug_OSMesaCreateContext(format, sharelist);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static OSMesaContext GL_BINDING_CALL Debug_OSMesaCreateContextExt(GLenum format, GLint depthBits, GLint stencilBits, GLint accumBits, OSMesaContext sharelist) {
  GL_SERVICE_LOG("OSMesaCreateContextExt" << "("  << format << ", " << depthBits << ", " << stencilBits << ", " << accumBits << ", " << sharelist << ")");
  OSMesaContext result = g_debug_OSMesaCreateContextExt(format, depthBits, stencilBits, accumBits, sharelist);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_OSMesaDestroyContext(OSMesaContext ctx) {
  GL_SERVICE_LOG("OSMesaDestroyContext" << "("  << ctx << ")");
  g_debug_OSMesaDestroyContext(ctx);
}

static GLboolean GL_BINDING_CALL Debug_OSMesaMakeCurrent(OSMesaContext ctx, void* buffer, GLenum type, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("OSMesaMakeCurrent" << "("  << ctx << ", " << static_cast<const void*>(buffer) << ", " << type << ", " << width << ", " << height << ")");
  GLboolean result = g_debug_OSMesaMakeCurrent(ctx, buffer, type, width, height);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static OSMesaContext GL_BINDING_CALL Debug_OSMesaGetCurrentContext(void) {
  GL_SERVICE_LOG("OSMesaGetCurrentContext" << "("  << ")");
  OSMesaContext result = g_debug_OSMesaGetCurrentContext();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_OSMesaPixelStore(GLint pname, GLint value) {
  GL_SERVICE_LOG("OSMesaPixelStore" << "("  << pname << ", " << value << ")");
  g_debug_OSMesaPixelStore(pname, value);
}

static void GL_BINDING_CALL Debug_OSMesaGetIntegerv(GLint pname, GLint* value) {
  GL_SERVICE_LOG("OSMesaGetIntegerv" << "("  << pname << ", " << static_cast<const void*>(value) << ")");
  g_debug_OSMesaGetIntegerv(pname, value);
}

static GLboolean GL_BINDING_CALL Debug_OSMesaGetDepthBuffer(OSMesaContext c, GLint* width, GLint* height, GLint* bytesPerValue, void** buffer) {
  GL_SERVICE_LOG("OSMesaGetDepthBuffer" << "("  << c << ", " << static_cast<const void*>(width) << ", " << static_cast<const void*>(height) << ", " << static_cast<const void*>(bytesPerValue) << ", " << buffer << ")");
  GLboolean result = g_debug_OSMesaGetDepthBuffer(c, width, height, bytesPerValue, buffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_OSMesaGetColorBuffer(OSMesaContext c, GLint* width, GLint* height, GLint* format, void** buffer) {
  GL_SERVICE_LOG("OSMesaGetColorBuffer" << "("  << c << ", " << static_cast<const void*>(width) << ", " << static_cast<const void*>(height) << ", " << static_cast<const void*>(format) << ", " << buffer << ")");
  GLboolean result = g_debug_OSMesaGetColorBuffer(c, width, height, format, buffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static OSMESAproc GL_BINDING_CALL Debug_OSMesaGetProcAddress(const char* funcName) {
  GL_SERVICE_LOG("OSMesaGetProcAddress" << "("  << static_cast<const void*>(funcName) << ")");
  OSMESAproc result = g_debug_OSMesaGetProcAddress(funcName);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_OSMesaColorClamp(GLboolean enable) {
  GL_SERVICE_LOG("OSMesaColorClamp" << "("  << enable << ")");
  g_debug_OSMesaColorClamp(enable);
}
}  // extern "C"

void InitializeDebugGLBindingsOSMESA() {
  if (!g_debug_OSMesaCreateContext) {
    g_debug_OSMesaCreateContext = g_OSMesaCreateContext;
    g_OSMesaCreateContext = Debug_OSMesaCreateContext;
  }
  if (!g_debug_OSMesaCreateContextExt) {
    g_debug_OSMesaCreateContextExt = g_OSMesaCreateContextExt;
    g_OSMesaCreateContextExt = Debug_OSMesaCreateContextExt;
  }
  if (!g_debug_OSMesaDestroyContext) {
    g_debug_OSMesaDestroyContext = g_OSMesaDestroyContext;
    g_OSMesaDestroyContext = Debug_OSMesaDestroyContext;
  }
  if (!g_debug_OSMesaMakeCurrent) {
    g_debug_OSMesaMakeCurrent = g_OSMesaMakeCurrent;
    g_OSMesaMakeCurrent = Debug_OSMesaMakeCurrent;
  }
  if (!g_debug_OSMesaGetCurrentContext) {
    g_debug_OSMesaGetCurrentContext = g_OSMesaGetCurrentContext;
    g_OSMesaGetCurrentContext = Debug_OSMesaGetCurrentContext;
  }
  if (!g_debug_OSMesaPixelStore) {
    g_debug_OSMesaPixelStore = g_OSMesaPixelStore;
    g_OSMesaPixelStore = Debug_OSMesaPixelStore;
  }
  if (!g_debug_OSMesaGetIntegerv) {
    g_debug_OSMesaGetIntegerv = g_OSMesaGetIntegerv;
    g_OSMesaGetIntegerv = Debug_OSMesaGetIntegerv;
  }
  if (!g_debug_OSMesaGetDepthBuffer) {
    g_debug_OSMesaGetDepthBuffer = g_OSMesaGetDepthBuffer;
    g_OSMesaGetDepthBuffer = Debug_OSMesaGetDepthBuffer;
  }
  if (!g_debug_OSMesaGetColorBuffer) {
    g_debug_OSMesaGetColorBuffer = g_OSMesaGetColorBuffer;
    g_OSMesaGetColorBuffer = Debug_OSMesaGetColorBuffer;
  }
  if (!g_debug_OSMesaGetProcAddress) {
    g_debug_OSMesaGetProcAddress = g_OSMesaGetProcAddress;
    g_OSMesaGetProcAddress = Debug_OSMesaGetProcAddress;
  }
  if (!g_debug_OSMesaColorClamp) {
    g_debug_OSMesaColorClamp = g_OSMesaColorClamp;
    g_OSMesaColorClamp = Debug_OSMesaColorClamp;
  }
}

}  // namespace gfx
